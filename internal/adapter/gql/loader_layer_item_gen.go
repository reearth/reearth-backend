// Code generated by gen, DO NOT EDIT.

package gql

import (
	"context"
	"time"

	"github.com/reearth/reearth-backend/internal/usecase"
	"github.com/reearth/reearth-backend/pkg/id"
)

type LayerItemDataLoader interface {
	Load(id.LayerID) (*LayerItem, error)
	LoadAll([]id.LayerID) ([]*LayerItem, []error)
}

func newLayerItem(ctx context.Context, c *LayerController, o *usecase.Operator) *LayerItemLoader {
	return NewLayerItemLoader(LayerItemLoaderConfig{
		Wait:     1 * time.Millisecond,
		MaxBatch: 100,
		Fetch: func(keys []id.LayerID) ([]*LayerItem, []error) {
			return c.FetchItem(ctx, keys, o)
		},
	})
}

func newOrdinaryLayerItem(ctx context.Context, c *LayerController, o *usecase.Operator) LayerItemDataLoader {
	return &ordinaryLayerItemLoader{
		fetch: func(keys []id.LayerID) ([]*LayerItem, []error) {
			return c.FetchItem(ctx, keys, o)
		},
	}
}

type ordinaryLayerItemLoader struct {
	fetch func(keys []id.LayerID) ([]*LayerItem, []error)
}

func (l *ordinaryLayerItemLoader) Load(key id.LayerID) (*LayerItem, error) {
	res, errs := l.fetch([]id.LayerID{key})
	if len(errs) > 0 {
		return nil, errs[0]
	}
	if len(res) > 0 {
		return res[0], nil
	}
	return nil, nil
}

func (l *ordinaryLayerItemLoader) LoadAll(keys []id.LayerID) ([]*LayerItem, []error) {
	return l.fetch(keys)
}
