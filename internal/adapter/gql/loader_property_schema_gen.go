// Code generated by gen, DO NOT EDIT.

package gql

import (
	"context"
	"time"

	"github.com/reearth/reearth-backend/internal/usecase"
	"github.com/reearth/reearth-backend/pkg/id"
)

type PropertySchemaDataLoader interface {
	Load(id.PropertySchemaID) (*PropertySchema, error)
	LoadAll([]id.PropertySchemaID) ([]*PropertySchema, []error)
}

func newPropertySchema(ctx context.Context, c *PropertyController, o *usecase.Operator) *PropertySchemaLoader {
	return NewPropertySchemaLoader(PropertySchemaLoaderConfig{
		Wait:     1 * time.Millisecond,
		MaxBatch: 100,
		Fetch: func(keys []id.PropertySchemaID) ([]*PropertySchema, []error) {
			return c.FetchSchema(ctx, keys, o)
		},
	})
}

func newOrdinaryPropertySchema(ctx context.Context, c *PropertyController, o *usecase.Operator) PropertySchemaDataLoader {
	return &ordinaryPropertySchemaLoader{
		fetch: func(keys []id.PropertySchemaID) ([]*PropertySchema, []error) {
			return c.FetchSchema(ctx, keys, o)
		},
	}
}

type ordinaryPropertySchemaLoader struct {
	fetch func(keys []id.PropertySchemaID) ([]*PropertySchema, []error)
}

func (l *ordinaryPropertySchemaLoader) Load(key id.PropertySchemaID) (*PropertySchema, error) {
	res, errs := l.fetch([]id.PropertySchemaID{key})
	if len(errs) > 0 {
		return nil, errs[0]
	}
	if len(res) > 0 {
		return res[0], nil
	}
	return nil, nil
}

func (l *ordinaryPropertySchemaLoader) LoadAll(keys []id.PropertySchemaID) ([]*PropertySchema, []error) {
	return l.fetch(keys)
}
