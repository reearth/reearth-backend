name: build
on:
  workflow_run:
    workflows: [ci]
    type: [completed]
    branches: [main, release]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  info:
    name: Collect information
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.repository.full_name == 'reearth/reearth-backend'
    outputs:
      sha_short: ${{ steps.info.outputs.sha_short }}
      tag: ${{ steps.info.outputs.tag }}
      tag_short: ${{ steps.info.outputs.tag_short }}
      branch: ${{ steps.info.outputs.branch }}
      name: ${{ steps.info.outputs.name }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Fetch tags
        run: git fetch --prune --unshallow --tags
      - name: Get info
        id: info
        # The tag name should be retrieved lazily, as tagging may be delayed.
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          TAG=$(git tag --points-at HEAD)
          if [[ ! -z "$TAG" ]]; then
            echo "::set-output name=tag::$TAG"
            echo "::set-output name=tag_short::${TAG#v}"
          fi
          BRANCH=$(git branch --show-current)
          echo "::set-output name=branch::$BRANCH"
          if [[ "$BRANCH" = "release" ]]; then
            echo "::set-output name=name::rc"
          else
            echo "::set-output name=name::nightly"
          fi
      - name: Show info
        env:
          SHA_SHORT: ${{ steps.info.outputs.sha_short }}
          TAG: ${{ steps.info.outputs.tag }}
          TAG_SHORT: ${{ steps.info.outputs.tag_short }}
          BRANCH: ${{ steps.info.outputs.branch }}
          NAME: ${{ steps.info.outputs.name }}
        run: echo "sha_short=$SHA_SHORT, tag=$TAG, tag_short=$TAG_SHORT, branch=$BRANCH, name=$NAME"
  build:
    name: Build and release
    runs-on: ubuntu-latest
    needs:
      - info
    if: needs.info.outputs.branch == 'main' || needs.info.outputs.branch == 'release'
    env:
      ARTIFACTS: dist/reearth-backend_*.*
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Run GoReleaser for nightly/rc
        uses: goreleaser/goreleaser-action@v2
        with:
          args: release --rm-dist --snapshot
        env:
          GORELEASER_CURRENT_TAG: ${{ needs.info.outputs.tag || needs.info.outputs.sha_short }}
      - name: Rename artifacts
        if: "!needs.info.outputs.tag"
        run: for f in $ARTIFACTS; do mv $f $(echo $f | sed -E 's/_0\.0\.0-SNAPSHOT-[^_]*/_${{ needs.info.outputs.name }}/'); done
      - name: Release nightly/rc
        if: "!needs.info.outputs.tag"
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.ARTIFACTS }}
          commit: ${{ github.sha }}
          name: ${{ needs.info.outputs.name }}
          tag: ${{ needs.info.outputs.name }}
          body: ${{ github.sha }}
          prerelease: true
      - name: Download latest changelog
        if: needs.info.outputs.branch == 'release' && needs.info.outputs.tag
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: release.yml
          name: changelog-${{ needs.info.outputs.tag }}
      - name: Create GitHub release
        if: needs.info.outputs.branch == 'release' && needs.info.outputs.tag
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.ARTIFACTS }}
          commit: ${{ github.sha }}
          name: ${{ needs.info.outputs.tag }}
          tag: ${{ needs.info.outputs.tag }}
          bodyFile: CHANGELOG_latest.md
  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs:
      - info
    if: needs.info.outputs.branch == 'main' || needs.info.outputs.branch == 'release'
    env:
      IMAGE_NAME: reearth/reearth-backend
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get Docker tags
        id: tags
        if: needs.info.outputs.branch == 'release' && needs.info.outputs.tag
        env:
          TAG: ${{ needs.info.outputs.tag_short }}
          NAME: ${{ needs.info.outputs.name }}
          SHA: ${{ needs.info.outputs.sha_short }}
        run: |
          if [[ -z $TAG ]]; then
            PLATFORMS=linux/amd64,linux/arm64
            VERSION=$TAG
            TAGS=$IMAGE_NAME:$TAG
            if [[ ! $TAG =~ '-' ]]; then
              TAGS+=,${IMAGE_NAME}:${TAG%.*}
              TAGS+=,${IMAGE_NAME}:${TAG%%.*}
              TAGS+=,${IMAGE_NAME}:latest
            fi
          else
            PLATFORMS=linux/amd64
            VERSION=$SHA
            TAGS=$IMAGE_NAME:$NAME
          fi
          echo "::set-output name=platforms::$PLATFORMS"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=tags::$TAGS"
      - name: Build and push docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{ steps.tags.outputs.platforms }}
          push: true
          build-args: VERSION=${{ steps.tags.outputs.version }}
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
