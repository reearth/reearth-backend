// Code generated by gen, DO NOT EDIT.

package id

import (
	"encoding/json"
	"errors"
	"testing"

	"github.com/oklog/ulid"
	"github.com/stretchr/testify/assert"
)

func TestNewPropertyItemID(t *testing.T) {
	id := NewPropertyItemID()
	assert.NotNil(t, id)
	ulID, err := ulid.Parse(id.String())

	assert.NotNil(t, ulID)
	assert.Nil(t, err)
}

func TestPropertyItemIDFrom(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    string
		expected struct {
			result PropertyItemID
			err    error
		}
	}{
		{
			name:  "Fail:Not valid string",
			input: "testMustFail",
			expected: struct {
				result PropertyItemID
				err    error
			}{
				PropertyItemID{},
				ErrInvalidID,
			},
		},
		{
			name:  "Fail:Not valid string",
			input: "",
			expected: struct {
				result PropertyItemID
				err    error
			}{
				PropertyItemID{},
				ErrInvalidID,
			},
		},
		{
			name:  "success:valid string",
			input: "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: struct {
				result PropertyItemID
				err    error
			}{
				PropertyItemID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
				nil,
			},
		},
	}
	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			result, err := PropertyItemIDFrom(tc.input)
			assert.Equal(tt, tc.expected.result, result)
			if err != nil {
				assert.True(tt, errors.As(tc.expected.err, &err))
			}
		})
	}
}

func TestMustPropertyItemID(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name        string
		input       string
		shouldPanic bool
		expected    PropertyItemID
	}{
		{
			name:        "Fail:Not valid string",
			input:       "testMustFail",
			shouldPanic: true,
		},
		{
			name:        "Fail:Not valid string",
			input:       "",
			shouldPanic: true,
		},
		{
			name:        "success:valid string",
			input:       "01f2r7kg1fvvffp0gmexgy5hxy",
			shouldPanic: false,
			expected:    PropertyItemID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}
	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			if tc.shouldPanic {
				assert.Panics(tt, func() { MustBeID(tc.input) })
				return
			}
			result := MustPropertyItemID(tc.input)
			assert.Equal(tt, tc.expected, result)
		})
	}
}

func TestPropertyItemIDFromRef(t *testing.T) {
	testCases := []struct {
		name     string
		input    string
		expected *PropertyItemID
	}{
		{
			name:     "Fail:Not valid string",
			input:    "testMustFail",
			expected: nil,
		},
		{
			name:     "Fail:Not valid string",
			input:    "",
			expected: nil,
		},
		{
			name:     "success:valid string",
			input:    "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: &PropertyItemID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}
	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			result := PropertyItemIDFromRef(&tc.input)
			assert.Equal(tt, tc.expected, result)
			if tc.expected != nil {
				assert.Equal(tt, *tc.expected, *result)
			}
		})
	}
}

func TestPropertyItemIDFromRefID(t *testing.T) {
	id := New()

	subId := PropertyItemIDFromRefID(&id)

	assert.NotNil(t, subId)
	assert.Equal(t, subId.id, id.id)
}

func TestPropertyItemID_ID(t *testing.T) {
	id := New()
	subId := PropertyItemIDFromRefID(&id)

	idOrg := subId.ID()

	assert.Equal(t, id, idOrg)
}

func TestPropertyItemID_String(t *testing.T) {
	id := New()
	subId := PropertyItemIDFromRefID(&id)

	assert.Equal(t, subId.String(), id.String())
}

func TestPropertyItemID_GoString(t *testing.T) {
	id := New()
	subId := PropertyItemIDFromRefID(&id)

	assert.Equal(t, subId.GoString(), "id.PropertyItemID("+id.String()+")")
}

func TestPropertyItemID_RefString(t *testing.T) {
	id := New()
	subId := PropertyItemIDFromRefID(&id)

	refString := subId.StringRef()

	assert.NotNil(t, refString)
	assert.Equal(t, *refString, id.String())
}

func TestPropertyItemID_Ref(t *testing.T) {
	id := New()
	subId := PropertyItemIDFromRefID(&id)

	subIdRef := subId.Ref()

	assert.Equal(t, *subId, *subIdRef)
	// TODO: check why this not working
	//assert.True(t, subId == subIdRef)
}

func TestPropertyItemID_CopyRef(t *testing.T) {
	id := New()
	subId := PropertyItemIDFromRefID(&id)

	subIdCopyRef := subId.CopyRef()

	assert.Equal(t, *subId, *subIdCopyRef)
	assert.False(t, subId == subIdCopyRef)
}

func TestPropertyItemID_IDRef(t *testing.T) {
	id := New()
	subId := PropertyItemIDFromRefID(&id)

	assert.Equal(t, id, *subId.IDRef())
}

func TestPropertyItemID_StringRef(t *testing.T) {
	id := New()
	subId := PropertyItemIDFromRefID(&id)

	assert.Equal(t, *subId.StringRef(), id.String())
}

func TestPropertyItemID_MarhsalJSON(t *testing.T) {
	id := New()
	subId := PropertyItemIDFromRefID(&id)

	res, err := subId.MarhsalJSON()
	exp, _ := json.Marshal(subId.String())

	assert.Nil(t, err)
	assert.Equal(t, exp, res)
}

func TestPropertyItemID_UnmarhsalJSON(t *testing.T) {
	jsonString := "\"01f3zhkysvcxsnzepyyqtq21fb\""

	subId := &PropertyItemID{}

	err := subId.UnmarhsalJSON([]byte(jsonString))

	assert.Nil(t, err)
	assert.Equal(t, "01f3zhkysvcxsnzepyyqtq21fb", subId.String())
}

func TestPropertyItemID_MarshalText(t *testing.T) {
	id := New()
	subId := PropertyItemIDFromRefID(&id)

	res, err := subId.MarshalText()

	assert.Nil(t, err)
	assert.Equal(t, []byte(id.String()), res)
}

func TestPropertyItemID_UnmarshalText(t *testing.T) {
	text := []byte("01f3zhcaq35403zdjnd6dcm0t2")

	subId := &PropertyItemID{}

	err := subId.UnmarshalText(text)

	assert.Nil(t, err)
	assert.Equal(t, "01f3zhcaq35403zdjnd6dcm0t2", subId.String())

}

func TestPropertyItemID_IsNil(t *testing.T) {
	subId := PropertyItemID{}

	assert.True(t, subId.IsNil())

	id := New()
	subId = *PropertyItemIDFromRefID(&id)

	assert.False(t, subId.IsNil())
}

func TestPropertyItemIDToKeys(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    []PropertyItemID
		expected []string
	}{
		{
			name:     "Empty slice",
			input:    make([]PropertyItemID, 0),
			expected: make([]string, 0),
		},
		{
			name:     "1 element",
			input:    []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
		},
		{
			name: "multiple elements",
			input: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			assert.Equal(tt, tc.expected, PropertyItemIDToKeys(tc.input))
		})
	}

}

func TestPropertyItemIDsFrom(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    []string
		expected struct {
			res []PropertyItemID
			err error
		}
	}{
		{
			name:  "Empty slice",
			input: make([]string, 0),
			expected: struct {
				res []PropertyItemID
				err error
			}{
				res: make([]PropertyItemID, 0),
				err: nil,
			},
		},
		{
			name:  "1 element",
			input: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
			expected: struct {
				res []PropertyItemID
				err error
			}{
				res: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []PropertyItemID
				err error
			}{
				res: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []PropertyItemID
				err error
			}{
				res: nil,
				err: ErrInvalidID,
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			if tc.expected.err != nil {
				_, err := PropertyItemIDsFrom(tc.input)
				assert.True(tt, errors.As(ErrInvalidID, &err))
			} else {
				res, err := PropertyItemIDsFrom(tc.input)
				assert.Equal(tt, tc.expected.res, res)
				assert.Nil(tt, err)
			}

		})
	}
}

func TestPropertyItemIDsFromID(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    []ID
		expected []PropertyItemID
	}{
		{
			name:     "Empty slice",
			input:    make([]ID, 0),
			expected: make([]PropertyItemID, 0),
		},
		{
			name:     "1 element",
			input:    []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := PropertyItemIDsFromID(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestPropertyItemIDsFromIDRef(t *testing.T) {
	t.Parallel()

	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")

	testCases := []struct {
		name     string
		input    []*ID
		expected []PropertyItemID
	}{
		{
			name:     "Empty slice",
			input:    make([]*ID, 0),
			expected: make([]PropertyItemID, 0),
		},
		{
			name:     "1 element",
			input:    []*ID{&id1},
			expected: []PropertyItemID{MustPropertyItemID(id1.String())},
		},
		{
			name:  "multiple elements",
			input: []*ID{&id1, &id2, &id3},
			expected: []PropertyItemID{
				MustPropertyItemID(id1.String()),
				MustPropertyItemID(id2.String()),
				MustPropertyItemID(id3.String()),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := PropertyItemIDsFromIDRef(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestPropertyItemIDsToID(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    []PropertyItemID
		expected []ID
	}{
		{
			name:     "Empty slice",
			input:    make([]PropertyItemID, 0),
			expected: make([]ID, 0),
		},
		{
			name:     "1 element",
			input:    []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := PropertyItemIDsToID(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestPropertyItemIDsToIDRef(t *testing.T) {
	t.Parallel()

	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	subId1 := MustPropertyItemID(id1.String())
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	subId2 := MustPropertyItemID(id2.String())
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")
	subId3 := MustPropertyItemID(id3.String())

	testCases := []struct {
		name     string
		input    []*PropertyItemID
		expected []*ID
	}{
		{
			name:     "Empty slice",
			input:    make([]*PropertyItemID, 0),
			expected: make([]*ID, 0),
		},
		{
			name:     "1 element",
			input:    []*PropertyItemID{&subId1},
			expected: []*ID{&id1},
		},
		{
			name:     "multiple elements",
			input:    []*PropertyItemID{&subId1, &subId2, &subId3},
			expected: []*ID{&id1, &id2, &id3},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := PropertyItemIDsToIDRef(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestNewPropertyItemIDSet(t *testing.T) {
	PropertyItemIdSet := NewPropertyItemIDSet()

	assert.NotNil(t, PropertyItemIdSet)
	assert.Empty(t, PropertyItemIdSet.m)
	assert.Empty(t, PropertyItemIdSet.s)
}

func TestPropertyItemIDSet_Add(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    []PropertyItemID
		expected *PropertyItemIDSet
	}{
		{
			name:  "Empty slice",
			input: make([]PropertyItemID, 0),
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{},
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"): struct{}{},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
		{
			name: "multiple elements with duplication",
			input: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"): struct{}{},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			set := NewPropertyItemIDSet()
			set.Add(tc.input...)
			assert.Equal(tt, tc.expected, set)
		})
	}
}

func TestPropertyItemIDSet_AddRef(t *testing.T) {
	t.Parallel()

	PropertyItemId := MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")

	testCases := []struct {
		name     string
		input    *PropertyItemID
		expected *PropertyItemIDSet
	}{
		{
			name:  "Empty slice",
			input: nil,
			expected: &PropertyItemIDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: &PropertyItemId,
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			set := NewPropertyItemIDSet()
			set.AddRef(tc.input)
			assert.Equal(tt, tc.expected, set)
		})
	}
}

func TestPropertyItemIDSet_Has(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name  string
		input struct {
			PropertyItemIDSet
			PropertyItemID
		}
		expected bool
	}{
		{
			name: "Empty Set",
			input: struct {
				PropertyItemIDSet
				PropertyItemID
			}{PropertyItemIDSet: PropertyItemIDSet{}, PropertyItemID: MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: false,
		},
		{
			name: "Set Contains the element",
			input: struct {
				PropertyItemIDSet
				PropertyItemID
			}{PropertyItemIDSet: PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			}, PropertyItemID: MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: true,
		},
		{
			name: "Set does not Contains the element",
			input: struct {
				PropertyItemIDSet
				PropertyItemID
			}{PropertyItemIDSet: PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			}, PropertyItemID: MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: false,
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			assert.Equal(tt, tc.expected, tc.input.PropertyItemIDSet.Has(tc.input.PropertyItemID))
		})
	}
}

func TestPropertyItemIDSet_Clear(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    PropertyItemIDSet
		expected PropertyItemIDSet
	}{
		{
			name:  "Empty Set",
			input: PropertyItemIDSet{},
			expected: PropertyItemIDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name: "Set Contains the element",
			input: PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: PropertyItemIDSet{
				m: nil,
				s: nil,
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			set := tc.input
			p := &set
			p.Clear()
			assert.Equal(tt, tc.expected, *p)
		})
	}
}

func TestPropertyItemIDSet_All(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    *PropertyItemIDSet
		expected []PropertyItemID
	}{
		{
			name: "Empty slice",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{},
				s: nil,
			},
			expected: make([]PropertyItemID, 0),
		},
		{
			name: "1 element",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
		},
		{
			name: "multiple elements",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"): struct{}{},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			assert.Equal(tt, tc.expected, tc.input.All())
		})
	}
}

func TestPropertyItemIDSet_Clone(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    *PropertyItemIDSet
		expected *PropertyItemIDSet
	}{
		{
			name:     "nil set",
			input:    nil,
			expected: NewPropertyItemIDSet(),
		},
		{
			name:     "Empty set",
			input:    NewPropertyItemIDSet(),
			expected: NewPropertyItemIDSet(),
		},
		{
			name: "1 element",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"): struct{}{},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"): struct{}{},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			clone := tc.input.Clone()
			assert.Equal(tt, tc.expected, clone)
			assert.False(tt, tc.input == clone)
		})
	}
}

func TestPropertyItemIDSet_Merge(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name  string
		input struct {
			a *PropertyItemIDSet
			b *PropertyItemIDSet
		}
		expected *PropertyItemIDSet
	}{
		{
			name: "Empty Set",
			input: struct {
				a *PropertyItemIDSet
				b *PropertyItemIDSet
			}{
				a: &PropertyItemIDSet{},
				b: &PropertyItemIDSet{},
			},
			expected: &PropertyItemIDSet{},
		},
		{
			name: "1 Empty Set",
			input: struct {
				a *PropertyItemIDSet
				b *PropertyItemIDSet
			}{
				a: &PropertyItemIDSet{
					m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
					s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &PropertyItemIDSet{},
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "2 non Empty Set",
			input: struct {
				a *PropertyItemIDSet
				b *PropertyItemIDSet
			}{
				a: &PropertyItemIDSet{
					m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
					s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &PropertyItemIDSet{
					m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{}},
					s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
				},
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			assert.Equal(tt, tc.expected, tc.input.a.Merge(tc.input.b))
		})
	}
}
