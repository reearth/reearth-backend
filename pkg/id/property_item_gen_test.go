// Code generated by gen, DO NOT EDIT.

package id

import (
	"encoding/json"
	"testing"

	"github.com/oklog/ulid"
	"github.com/stretchr/testify/assert"
)

func TestNewPropertyItemID(t *testing.T) {
	id := NewPropertyItemID()
	assert.NotNil(t, id)
	u, err := ulid.Parse(id.String())
	assert.NotNil(t, u)
	assert.Nil(t, err)
}

func TestPropertyItemIDFrom(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected struct {
			result PropertyItemID
			err    error
		}
	}{
		{
			name:  "Fail:Not valid string",
			input: "testMustFail",
			expected: struct {
				result PropertyItemID
				err    error
			}{
				result: PropertyItemID{},
				err:    ErrInvalidID,
			},
		},
		{
			name:  "Fail:Not valid string",
			input: "",
			expected: struct {
				result PropertyItemID
				err    error
			}{
				result: PropertyItemID{},
				err:    ErrInvalidID,
			},
		},
		{
			name:  "success:valid string",
			input: "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: struct {
				result PropertyItemID
				err    error
			}{
				result: PropertyItemID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
				err:    nil,
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result, err := PropertyItemIDFrom(tt.input)
			assert.Equal(t, tt.expected.result, result)
			if tt.expected.err != nil {
				assert.Equal(t, tt.expected.err, err)
			}
		})
	}
}

func TestMustPropertyItemID(t *testing.T) {
	tests := []struct {
		name        string
		input       string
		shouldPanic bool
		expected    PropertyItemID
	}{
		{
			name:        "Fail:Not valid string",
			input:       "testMustFail",
			shouldPanic: true,
		},
		{
			name:        "Fail:Not valid string",
			input:       "",
			shouldPanic: true,
		},
		{
			name:        "success:valid string",
			input:       "01f2r7kg1fvvffp0gmexgy5hxy",
			shouldPanic: false,
			expected:    PropertyItemID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			if tt.shouldPanic {
				assert.Panics(t, func() { MustBeID(tt.input) })
				return
			}
			result := MustPropertyItemID(tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func TestPropertyItemIDFromRef(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected *PropertyItemID
	}{
		{
			name:     "Fail:Not valid string",
			input:    "testMustFail",
			expected: nil,
		},
		{
			name:     "Fail:Not valid string",
			input:    "",
			expected: nil,
		},
		{
			name:     "success:valid string",
			input:    "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: &PropertyItemID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result := PropertyItemIDFromRef(&tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func TestPropertyItemIDFromRefID(t *testing.T) {
	id := New()
	id2 := PropertyItemIDFromRefID(&id)
	assert.Equal(t, id.id, id2.id)
	assert.Nil(t, PropertyItemIDFromRefID(nil))
	assert.Nil(t, PropertyItemIDFromRefID(&ID{}))
}

func TestPropertyItemID_ID(t *testing.T) {
	id := New()
	id2 := PropertyItemIDFromRefID(&id)
	assert.Equal(t, id, id2.ID())
}

func TestPropertyItemID_String(t *testing.T) {
	id := New()
	id2 := PropertyItemIDFromRefID(&id)
	assert.Equal(t, id.String(), id2.String())
	assert.Equal(t, "", PropertyItemID{}.String())
}

func TestPropertyItemID_RefString(t *testing.T) {
	id := NewPropertyItemID()
	assert.Equal(t, id.String(), *id.RefString())
	assert.Nil(t, PropertyItemID{}.RefString())
}

func TestPropertyItemID_GoString(t *testing.T) {
	id := New()
	id2 := PropertyItemIDFromRefID(&id)
	assert.Equal(t, "PropertyItemID("+id.String()+")", id2.GoString())
	assert.Equal(t, "PropertyItemID()", PropertyItemID{}.GoString())
}

func TestPropertyItemID_Ref(t *testing.T) {
	id := NewPropertyItemID()
	assert.Equal(t, PropertyItemID(id), *id.Ref())
	assert.Nil(t, (&PropertyItemID{}).Ref())
}

func TestPropertyItemID_Contains(t *testing.T) {
	id := NewPropertyItemID()
	id2 := NewPropertyItemID()
	assert.True(t, id.Contains([]PropertyItemID{id, id2}))
	assert.False(t, PropertyItemID{}.Contains([]PropertyItemID{id, id2, {}}))
	assert.False(t, id.Contains([]PropertyItemID{id2}))
}

func TestPropertyItemID_CopyRef(t *testing.T) {
	id := NewPropertyItemID().Ref()
	id2 := id.CopyRef()
	assert.Equal(t, id, id2)
	assert.NotSame(t, id, id2)
	assert.Nil(t, (*PropertyItemID)(nil).CopyRef())
}

func TestPropertyItemID_IDRef(t *testing.T) {
	id := New()
	id2 := PropertyItemIDFromRefID(&id)
	assert.Equal(t, &id, id2.IDRef())
	assert.Nil(t, (&PropertyItemID{}).IDRef())
	assert.Nil(t, (*PropertyItemID)(nil).IDRef())
}

func TestPropertyItemID_StringRef(t *testing.T) {
	id := NewPropertyItemID()
	assert.Equal(t, id.String(), *id.StringRef())
	assert.Nil(t, (&PropertyItemID{}).StringRef())
	assert.Nil(t, (*PropertyItemID)(nil).StringRef())
}

func TestPropertyItemID_MarhsalJSON(t *testing.T) {
	id := NewPropertyItemID()
	res, err := id.MarhsalJSON()
	assert.Nil(t, err)
	exp, _ := json.Marshal(id.String())
	assert.Equal(t, exp, res)

	res, err = (&PropertyItemID{}).MarhsalJSON()
	assert.Nil(t, err)
	assert.Nil(t, res)

	res, err = (*PropertyItemID)(nil).MarhsalJSON()
	assert.Nil(t, err)
	assert.Nil(t, res)
}

func TestPropertyItemID_UnmarhsalJSON(t *testing.T) {
	jsonString := "\"01f3zhkysvcxsnzepyyqtq21fb\""
	id := MustPropertyItemID("01f3zhkysvcxsnzepyyqtq21fb")
	id2 := &PropertyItemID{}
	err := id2.UnmarhsalJSON([]byte(jsonString))
	assert.Nil(t, err)
	assert.Equal(t, id, *id2)
}

func TestPropertyItemID_MarshalText(t *testing.T) {
	id := New()
	res, err := PropertyItemIDFromRefID(&id).MarshalText()
	assert.Nil(t, err)
	assert.Equal(t, []byte(id.String()), res)

	res, err = (&PropertyItemID{}).MarshalText()
	assert.Nil(t, err)
	assert.Nil(t, res)

	res, err = (*PropertyItemID)(nil).MarshalText()
	assert.Nil(t, err)
	assert.Nil(t, res)
}

func TestPropertyItemID_UnmarshalText(t *testing.T) {
	text := []byte("01f3zhcaq35403zdjnd6dcm0t2")
	id2 := &PropertyItemID{}
	err := id2.UnmarshalText(text)
	assert.Nil(t, err)
	assert.Equal(t, "01f3zhcaq35403zdjnd6dcm0t2", id2.String())
}

func TestPropertyItemID_IsNil(t *testing.T) {
	assert.True(t, PropertyItemID{}.IsNil())
	assert.False(t, NewPropertyItemID().IsNil())
}

func TestPropertyItemID_IsNilRef(t *testing.T) {
	assert.True(t, PropertyItemID{}.Ref().IsNilRef())
	assert.True(t, (*PropertyItemID)(nil).IsNilRef())
	assert.False(t, NewPropertyItemID().Ref().IsNilRef())
}

func TestPropertyItemIDsToStrings(t *testing.T) {
	tests := []struct {
		name     string
		input    []PropertyItemID
		expected []string
	}{
		{
			name:     "Empty slice",
			input:    make([]PropertyItemID, 0),
			expected: make([]string, 0),
		},
		{
			name:     "1 element",
			input:    []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
		},
		{
			name: "multiple elements",
			input: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tt.expected, PropertyItemIDsToStrings(tt.input))
		})
	}
}

func TestPropertyItemIDsFrom(t *testing.T) {
	tests := []struct {
		name     string
		input    []string
		expected struct {
			res []PropertyItemID
			err error
		}
	}{
		{
			name:  "Empty slice",
			input: make([]string, 0),
			expected: struct {
				res []PropertyItemID
				err error
			}{
				res: make([]PropertyItemID, 0),
				err: nil,
			},
		},
		{
			name:  "1 element",
			input: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
			expected: struct {
				res []PropertyItemID
				err error
			}{
				res: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []PropertyItemID
				err error
			}{
				res: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
				err: nil,
			},
		},
		{
			name: "error",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"x",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []PropertyItemID
				err error
			}{
				res: nil,
				err: ErrInvalidID,
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res, err := PropertyItemIDsFrom(tc.input)
			if tc.expected.err != nil {
				assert.Equal(t, tc.expected.err, err)
				assert.Nil(t, res)
			} else {
				assert.Nil(t, err)
				assert.Equal(t, tc.expected.res, res)
			}
		})
	}
}

func TestPropertyItemIDsFromID(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name     string
		input    []ID
		expected []PropertyItemID
	}{
		{
			name:     "Empty slice",
			input:    make([]ID, 0),
			expected: make([]PropertyItemID, 0),
		},
		{
			name:     "1 element",
			input:    []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := PropertyItemIDsFromID(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestPropertyItemIDsFromIDRef(t *testing.T) {
	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")

	tests := []struct {
		name     string
		input    []*ID
		expected []PropertyItemID
	}{
		{
			name:     "Empty slice",
			input:    make([]*ID, 0),
			expected: make([]PropertyItemID, 0),
		},
		{
			name:     "1 element",
			input:    []*ID{&id1},
			expected: []PropertyItemID{MustPropertyItemID(id1.String())},
		},
		{
			name:  "multiple elements",
			input: []*ID{&id1, &id2, &id3},
			expected: []PropertyItemID{
				MustPropertyItemID(id1.String()),
				MustPropertyItemID(id2.String()),
				MustPropertyItemID(id3.String()),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := PropertyItemIDsFromIDRef(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestPropertyItemIDsToID(t *testing.T) {
	tests := []struct {
		name     string
		input    []PropertyItemID
		expected []ID
	}{
		{
			name:     "Empty slice",
			input:    make([]PropertyItemID, 0),
			expected: make([]ID, 0),
		},
		{
			name:     "1 element",
			input:    []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := PropertyItemIDsToID(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestPropertyItemIDsToIDRef(t *testing.T) {
	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id21 := MustPropertyItemID(id1.String())
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id22 := MustPropertyItemID(id2.String())
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")
	id23 := MustPropertyItemID(id3.String())

	tests := []struct {
		name     string
		input    []*PropertyItemID
		expected []*ID
	}{
		{
			name:     "Empty slice",
			input:    make([]*PropertyItemID, 0),
			expected: make([]*ID, 0),
		},
		{
			name:     "1 element",
			input:    []*PropertyItemID{&id21},
			expected: []*ID{&id1},
		},
		{
			name:     "multiple elements",
			input:    []*PropertyItemID{&id21, &id22, &id23},
			expected: []*ID{&id1, &id2, &id3},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := PropertyItemIDsToIDRef(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestNewPropertyItemIDSet(t *testing.T) {
	PropertyItemIdSet := NewPropertyItemIDSet()
	assert.NotNil(t, PropertyItemIdSet)
	assert.Empty(t, PropertyItemIdSet.m)
	assert.Empty(t, PropertyItemIdSet.s)
}

func TestPropertyItemIDSet_Add(t *testing.T) {
	tests := []struct {
		name     string
		input    []PropertyItemID
		expected *PropertyItemIDSet
	}{
		{
			name:  "Empty slice",
			input: make([]PropertyItemID, 0),
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{},
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
		{
			name: "multiple elements with duplication",
			input: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			set := NewPropertyItemIDSet()
			set.Add(tc.input...)
			assert.Equal(t, tc.expected, set)
		})
	}
}

func TestPropertyItemIDSet_AddRef(t *testing.T) {
	tests := []struct {
		name     string
		input    *PropertyItemID
		expected *PropertyItemIDSet
	}{
		{
			name:  "Empty slice",
			input: nil,
			expected: &PropertyItemIDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1").Ref(),
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			set := NewPropertyItemIDSet()
			set.AddRef(tc.input)
			assert.Equal(t, tc.expected, set)
		})
	}
}

func TestPropertyItemIDSet_Has(t *testing.T) {
	tests := []struct {
		name     string
		target   *PropertyItemIDSet
		input    PropertyItemID
		expected bool
	}{
		{
			name:     "Empty Set",
			target:   &PropertyItemIDSet{},
			input:    MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
			expected: false,
		},
		{
			name: "Set Contains the element",
			target: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			input:    MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
			expected: true,
		},
		{
			name: "Set does not Contains the element",
			target: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			input:    MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
			expected: false,
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.target.Has(tc.input))
		})
	}
}

func TestPropertyItemIDSet_Clear(t *testing.T) {
	tests := []struct {
		name     string
		input    *PropertyItemIDSet
		expected *PropertyItemIDSet
	}{
		{
			name:     "Empty set",
			input:    &PropertyItemIDSet{},
			expected: &PropertyItemIDSet{},
		},
		{
			name:     "Nil set",
			input:    nil,
			expected: nil,
		},
		{
			name: "Contains the element",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &PropertyItemIDSet{
				m: nil,
				s: nil,
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			tc.input.Clear()
			assert.Equal(t, tc.expected, tc.input)
		})
	}
}

func TestPropertyItemIDSet_All(t *testing.T) {
	tests := []struct {
		name     string
		input    *PropertyItemIDSet
		expected []PropertyItemID
	}{
		{
			name: "Empty",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{},
				s: nil,
			},
			expected: make([]PropertyItemID, 0),
		},
		{
			name:     "Nil",
			input:    nil,
			expected: nil,
		},
		{
			name: "1 element",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
		},
		{
			name: "multiple elements",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: []PropertyItemID{
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.input.All())
		})
	}
}

func TestPropertyItemIDSet_Clone(t *testing.T) {
	tests := []struct {
		name     string
		input    *PropertyItemIDSet
		expected *PropertyItemIDSet
	}{
		{
			name:     "nil set",
			input:    nil,
			expected: NewPropertyItemIDSet(),
		},
		{
			name:     "Empty set",
			input:    NewPropertyItemIDSet(),
			expected: NewPropertyItemIDSet(),
		},
		{
			name: "1 element",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			clone := tc.input.Clone()
			assert.Equal(t, tc.expected, clone)
			assert.NotSame(t, tc.input, clone)
		})
	}
}

func TestPropertyItemIDSet_Merge(t *testing.T) {
	tests := []struct {
		name  string
		input struct {
			a *PropertyItemIDSet
			b *PropertyItemIDSet
		}
		expected *PropertyItemIDSet
	}{
		{
			name: "Nil Set",
			input: struct {
				a *PropertyItemIDSet
				b *PropertyItemIDSet
			}{
				a: &PropertyItemIDSet{
					m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: nil,
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "Empty Set",
			input: struct {
				a *PropertyItemIDSet
				b *PropertyItemIDSet
			}{
				a: &PropertyItemIDSet{},
				b: &PropertyItemIDSet{},
			},
			expected: &PropertyItemIDSet{},
		},
		{
			name: "1 Empty Set",
			input: struct {
				a *PropertyItemIDSet
				b *PropertyItemIDSet
			}{
				a: &PropertyItemIDSet{
					m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &PropertyItemIDSet{},
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "2 non Empty Set",
			input: struct {
				a *PropertyItemIDSet
				b *PropertyItemIDSet
			}{
				a: &PropertyItemIDSet{
					m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &PropertyItemIDSet{
					m: map[PropertyItemID]struct{}{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): {}},
					s: []PropertyItemID{MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2")},
				},
			},
			expected: &PropertyItemIDSet{
				m: map[PropertyItemID]struct{}{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"): {},
				},
				s: []PropertyItemID{
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyItemID("01f3zhcaq35403zdjnd6dcm0t2"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.input.a.Merge(tc.input.b))
		})
	}
}
