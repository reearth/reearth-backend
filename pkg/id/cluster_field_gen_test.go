// Code generated by gen, DO NOT EDIT.

package id

import (
	"encoding/json"
	"testing"

	"github.com/oklog/ulid"
	"github.com/stretchr/testify/assert"
)

func TestNewClusterID(t *testing.T) {
	id := NewClusterID()
	assert.NotNil(t, id)
	u, err := ulid.Parse(id.String())
	assert.NotNil(t, u)
	assert.Nil(t, err)
}

func TestClusterIDFrom(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected struct {
			result ClusterID
			err    error
		}
	}{
		{
			name:  "Fail:Not valid string",
			input: "testMustFail",
			expected: struct {
				result ClusterID
				err    error
			}{
				result: ClusterID{},
				err:    ErrInvalidID,
			},
		},
		{
			name:  "Fail:Not valid string",
			input: "",
			expected: struct {
				result ClusterID
				err    error
			}{
				result: ClusterID{},
				err:    ErrInvalidID,
			},
		},
		{
			name:  "success:valid string",
			input: "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: struct {
				result ClusterID
				err    error
			}{
				result: ClusterID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
				err:    nil,
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result, err := ClusterIDFrom(tt.input)
			assert.Equal(t, tt.expected.result, result)
			if tt.expected.err != nil {
				assert.Equal(t, tt.expected.err, err)
			}
		})
	}
}

func TestMustClusterID(t *testing.T) {
	tests := []struct {
		name        string
		input       string
		shouldPanic bool
		expected    ClusterID
	}{
		{
			name:        "Fail:Not valid string",
			input:       "testMustFail",
			shouldPanic: true,
		},
		{
			name:        "Fail:Not valid string",
			input:       "",
			shouldPanic: true,
		},
		{
			name:        "success:valid string",
			input:       "01f2r7kg1fvvffp0gmexgy5hxy",
			shouldPanic: false,
			expected:    ClusterID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			if tt.shouldPanic {
				assert.Panics(t, func() { MustBeID(tt.input) })
				return
			}
			result := MustClusterID(tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func TestClusterIDFromRef(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected *ClusterID
	}{
		{
			name:     "Fail:Not valid string",
			input:    "testMustFail",
			expected: nil,
		},
		{
			name:     "Fail:Not valid string",
			input:    "",
			expected: nil,
		},
		{
			name:     "success:valid string",
			input:    "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: &ClusterID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result := ClusterIDFromRef(&tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func TestClusterIDFromRefID(t *testing.T) {
	id := New()
	id2 := ClusterIDFromRefID(&id)
	assert.Equal(t, id.id, id2.id)
	assert.Nil(t, ClusterIDFromRefID(nil))
	assert.Nil(t, ClusterIDFromRefID(&ID{}))
}

func TestClusterID_ID(t *testing.T) {
	id := New()
	id2 := ClusterIDFromRefID(&id)
	assert.Equal(t, id, id2.ID())
}

func TestClusterID_String(t *testing.T) {
	id := New()
	id2 := ClusterIDFromRefID(&id)
	assert.Equal(t, id.String(), id2.String())
	assert.Equal(t, "", ClusterID{}.String())
}

func TestClusterID_RefString(t *testing.T) {
	id := NewClusterID()
	assert.Equal(t, id.String(), *id.RefString())
	assert.Nil(t, ClusterID{}.RefString())
}

func TestClusterID_GoString(t *testing.T) {
	id := New()
	id2 := ClusterIDFromRefID(&id)
	assert.Equal(t, "ClusterID("+id.String()+")", id2.GoString())
	assert.Equal(t, "ClusterID()", ClusterID{}.GoString())
}

func TestClusterID_Ref(t *testing.T) {
	id := NewClusterID()
	assert.Equal(t, ClusterID(id), *id.Ref())
	assert.Nil(t, (&ClusterID{}).Ref())
}

func TestClusterID_Contains(t *testing.T) {
	id := NewClusterID()
	id2 := NewClusterID()
	assert.True(t, id.Contains([]ClusterID{id, id2}))
	assert.False(t, ClusterID{}.Contains([]ClusterID{id, id2, {}}))
	assert.False(t, id.Contains([]ClusterID{id2}))
}

func TestClusterID_CopyRef(t *testing.T) {
	id := NewClusterID().Ref()
	id2 := id.CopyRef()
	assert.Equal(t, id, id2)
	assert.NotSame(t, id, id2)
	assert.Nil(t, (*ClusterID)(nil).CopyRef())
}

func TestClusterID_IDRef(t *testing.T) {
	id := New()
	id2 := ClusterIDFromRefID(&id)
	assert.Equal(t, &id, id2.IDRef())
	assert.Nil(t, (&ClusterID{}).IDRef())
	assert.Nil(t, (*ClusterID)(nil).IDRef())
}

func TestClusterID_StringRef(t *testing.T) {
	id := NewClusterID()
	assert.Equal(t, id.String(), *id.StringRef())
	assert.Nil(t, (&ClusterID{}).StringRef())
	assert.Nil(t, (*ClusterID)(nil).StringRef())
}

func TestClusterID_MarhsalJSON(t *testing.T) {
	id := NewClusterID()
	res, err := id.MarhsalJSON()
	assert.Nil(t, err)
	exp, _ := json.Marshal(id.String())
	assert.Equal(t, exp, res)

	res, err = (&ClusterID{}).MarhsalJSON()
	assert.Nil(t, err)
	assert.Nil(t, res)

	res, err = (*ClusterID)(nil).MarhsalJSON()
	assert.Nil(t, err)
	assert.Nil(t, res)
}

func TestClusterID_UnmarhsalJSON(t *testing.T) {
	jsonString := "\"01f3zhkysvcxsnzepyyqtq21fb\""
	id := MustClusterID("01f3zhkysvcxsnzepyyqtq21fb")
	id2 := &ClusterID{}
	err := id2.UnmarhsalJSON([]byte(jsonString))
	assert.Nil(t, err)
	assert.Equal(t, id, *id2)
}

func TestClusterID_MarshalText(t *testing.T) {
	id := New()
	res, err := ClusterIDFromRefID(&id).MarshalText()
	assert.Nil(t, err)
	assert.Equal(t, []byte(id.String()), res)

	res, err = (&ClusterID{}).MarshalText()
	assert.Nil(t, err)
	assert.Nil(t, res)

	res, err = (*ClusterID)(nil).MarshalText()
	assert.Nil(t, err)
	assert.Nil(t, res)
}

func TestClusterID_UnmarshalText(t *testing.T) {
	text := []byte("01f3zhcaq35403zdjnd6dcm0t2")
	id2 := &ClusterID{}
	err := id2.UnmarshalText(text)
	assert.Nil(t, err)
	assert.Equal(t, "01f3zhcaq35403zdjnd6dcm0t2", id2.String())
}

func TestClusterID_IsNil(t *testing.T) {
	assert.True(t, ClusterID{}.IsNil())
	assert.False(t, NewClusterID().IsNil())
}

func TestClusterID_IsNilRef(t *testing.T) {
	assert.True(t, ClusterID{}.Ref().IsNilRef())
	assert.True(t, (*ClusterID)(nil).IsNilRef())
	assert.False(t, NewClusterID().Ref().IsNilRef())
}

func TestClusterIDsToStrings(t *testing.T) {
	tests := []struct {
		name     string
		input    []ClusterID
		expected []string
	}{
		{
			name:     "Empty slice",
			input:    make([]ClusterID, 0),
			expected: make([]string, 0),
		},
		{
			name:     "1 element",
			input:    []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
		},
		{
			name: "multiple elements",
			input: []ClusterID{
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tt.expected, ClusterIDsToStrings(tt.input))
		})
	}
}

func TestClusterIDsFrom(t *testing.T) {
	tests := []struct {
		name     string
		input    []string
		expected struct {
			res []ClusterID
			err error
		}
	}{
		{
			name:  "Empty slice",
			input: make([]string, 0),
			expected: struct {
				res []ClusterID
				err error
			}{
				res: make([]ClusterID, 0),
				err: nil,
			},
		},
		{
			name:  "1 element",
			input: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
			expected: struct {
				res []ClusterID
				err error
			}{
				res: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t2")},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []ClusterID
				err error
			}{
				res: []ClusterID{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
				err: nil,
			},
		},
		{
			name: "error",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"x",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []ClusterID
				err error
			}{
				res: nil,
				err: ErrInvalidID,
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res, err := ClusterIDsFrom(tc.input)
			if tc.expected.err != nil {
				assert.Equal(t, tc.expected.err, err)
				assert.Nil(t, res)
			} else {
				assert.Nil(t, err)
				assert.Equal(t, tc.expected.res, res)
			}
		})
	}
}

func TestClusterIDsFromID(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name     string
		input    []ID
		expected []ClusterID
	}{
		{
			name:     "Empty slice",
			input:    make([]ID, 0),
			expected: make([]ClusterID, 0),
		},
		{
			name:     "1 element",
			input:    []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []ClusterID{
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := ClusterIDsFromID(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestClusterIDsFromIDRef(t *testing.T) {
	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")

	tests := []struct {
		name     string
		input    []*ID
		expected []ClusterID
	}{
		{
			name:     "Empty slice",
			input:    make([]*ID, 0),
			expected: make([]ClusterID, 0),
		},
		{
			name:     "1 element",
			input:    []*ID{&id1},
			expected: []ClusterID{MustClusterID(id1.String())},
		},
		{
			name:  "multiple elements",
			input: []*ID{&id1, &id2, &id3},
			expected: []ClusterID{
				MustClusterID(id1.String()),
				MustClusterID(id2.String()),
				MustClusterID(id3.String()),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := ClusterIDsFromIDRef(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestClusterIDsToID(t *testing.T) {
	tests := []struct {
		name     string
		input    []ClusterID
		expected []ID
	}{
		{
			name:     "Empty slice",
			input:    make([]ClusterID, 0),
			expected: make([]ID, 0),
		},
		{
			name:     "1 element",
			input:    []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []ClusterID{
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := ClusterIDsToID(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestClusterIDsToIDRef(t *testing.T) {
	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id21 := MustClusterID(id1.String())
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id22 := MustClusterID(id2.String())
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")
	id23 := MustClusterID(id3.String())

	tests := []struct {
		name     string
		input    []*ClusterID
		expected []*ID
	}{
		{
			name:     "Empty slice",
			input:    make([]*ClusterID, 0),
			expected: make([]*ID, 0),
		},
		{
			name:     "1 element",
			input:    []*ClusterID{&id21},
			expected: []*ID{&id1},
		},
		{
			name:     "multiple elements",
			input:    []*ClusterID{&id21, &id22, &id23},
			expected: []*ID{&id1, &id2, &id3},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := ClusterIDsToIDRef(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestNewClusterIDSet(t *testing.T) {
	set := NewClusterIDSet()
	assert.NotNil(t, set)
	assert.Empty(t, set.m)
	assert.Empty(t, set.s)
	a := NewClusterID()
	b := NewClusterID()
	set = NewClusterIDSet(a, a, b)
	assert.Equal(t, []ClusterID{a, b}, set.s)
}

func TestClusterIDSet_Add(t *testing.T) {
	tests := []struct {
		name     string
		input    []ClusterID
		expected *ClusterIDSet
	}{
		{
			name:  "Empty slice",
			input: make([]ClusterID, 0),
			expected: &ClusterIDSet{
				m: map[ClusterID]struct{}{},
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: &ClusterIDSet{
				m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: []ClusterID{
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &ClusterIDSet{
				m: map[ClusterID]struct{}{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []ClusterID{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
		{
			name: "multiple elements with duplication",
			input: []ClusterID{
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &ClusterIDSet{
				m: map[ClusterID]struct{}{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []ClusterID{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			set := NewClusterIDSet()
			set.Add(tc.input...)
			assert.Equal(t, tc.expected, set)
		})
	}
}

func TestClusterIDSet_AddRef(t *testing.T) {
	tests := []struct {
		name     string
		input    *ClusterID
		expected *ClusterIDSet
	}{
		{
			name:  "Empty slice",
			input: nil,
			expected: &ClusterIDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: MustClusterID("01f3zhcaq35403zdjnd6dcm0t1").Ref(),
			expected: &ClusterIDSet{
				m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			set := NewClusterIDSet()
			set.AddRef(tc.input)
			assert.Equal(t, tc.expected, set)
		})
	}
}

func TestClusterIDSet_Has(t *testing.T) {
	tests := []struct {
		name     string
		target   *ClusterIDSet
		input    ClusterID
		expected bool
	}{
		{
			name:     "Empty Set",
			target:   &ClusterIDSet{},
			input:    MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
			expected: false,
		},
		{
			name: "Set Contains the element",
			target: &ClusterIDSet{
				m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			input:    MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
			expected: true,
		},
		{
			name: "Set does not Contains the element",
			target: &ClusterIDSet{
				m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			input:    MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
			expected: false,
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.target.Has(tc.input))
		})
	}
}

func TestClusterIDSet_Clear(t *testing.T) {
	tests := []struct {
		name     string
		input    *ClusterIDSet
		expected *ClusterIDSet
	}{
		{
			name:     "Empty set",
			input:    &ClusterIDSet{},
			expected: &ClusterIDSet{},
		},
		{
			name:     "Nil set",
			input:    nil,
			expected: nil,
		},
		{
			name: "Contains the element",
			input: &ClusterIDSet{
				m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &ClusterIDSet{
				m: nil,
				s: nil,
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			tc.input.Clear()
			assert.Equal(t, tc.expected, tc.input)
		})
	}
}

func TestClusterIDSet_All(t *testing.T) {
	tests := []struct {
		name     string
		input    *ClusterIDSet
		expected []ClusterID
	}{
		{
			name: "Empty",
			input: &ClusterIDSet{
				m: map[ClusterID]struct{}{},
				s: nil,
			},
			expected: make([]ClusterID, 0),
		},
		{
			name:     "Nil",
			input:    nil,
			expected: nil,
		},
		{
			name: "1 element",
			input: &ClusterIDSet{
				m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
		},
		{
			name: "multiple elements",
			input: &ClusterIDSet{
				m: map[ClusterID]struct{}{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []ClusterID{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: []ClusterID{
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.input.All())
		})
	}
}

func TestClusterIDSet_Clone(t *testing.T) {
	tests := []struct {
		name     string
		input    *ClusterIDSet
		expected *ClusterIDSet
	}{
		{
			name:     "nil set",
			input:    nil,
			expected: NewClusterIDSet(),
		},
		{
			name:     "Empty set",
			input:    NewClusterIDSet(),
			expected: NewClusterIDSet(),
		},
		{
			name: "1 element",
			input: &ClusterIDSet{
				m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &ClusterIDSet{
				m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: &ClusterIDSet{
				m: map[ClusterID]struct{}{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []ClusterID{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: &ClusterIDSet{
				m: map[ClusterID]struct{}{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []ClusterID{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			clone := tc.input.Clone()
			assert.Equal(t, tc.expected, clone)
			assert.NotSame(t, tc.input, clone)
		})
	}
}

func TestClusterIDSet_Merge(t *testing.T) {
	tests := []struct {
		name  string
		input struct {
			a *ClusterIDSet
			b *ClusterIDSet
		}
		expected *ClusterIDSet
	}{
		{
			name: "Nil Set",
			input: struct {
				a *ClusterIDSet
				b *ClusterIDSet
			}{
				a: &ClusterIDSet{
					m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: nil,
			},
			expected: &ClusterIDSet{
				m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "Empty Set",
			input: struct {
				a *ClusterIDSet
				b *ClusterIDSet
			}{
				a: &ClusterIDSet{},
				b: &ClusterIDSet{},
			},
			expected: &ClusterIDSet{},
		},
		{
			name: "1 Empty Set",
			input: struct {
				a *ClusterIDSet
				b *ClusterIDSet
			}{
				a: &ClusterIDSet{
					m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &ClusterIDSet{},
			},
			expected: &ClusterIDSet{
				m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "2 non Empty Set",
			input: struct {
				a *ClusterIDSet
				b *ClusterIDSet
			}{
				a: &ClusterIDSet{
					m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &ClusterIDSet{
					m: map[ClusterID]struct{}{MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"): {}},
					s: []ClusterID{MustClusterID("01f3zhcaq35403zdjnd6dcm0t2")},
				},
			},
			expected: &ClusterIDSet{
				m: map[ClusterID]struct{}{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"): {},
				},
				s: []ClusterID{
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustClusterID("01f3zhcaq35403zdjnd6dcm0t2"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.input.a.Merge(tc.input.b))
		})
	}
}
