// Code generated by gen, DO NOT EDIT.

package id

import (
	"encoding/json"
	"testing"

	"github.com/oklog/ulid"
	"github.com/stretchr/testify/assert"
)

func TestNewPropertyID(t *testing.T) {
	id := NewPropertyID()
	assert.NotNil(t, id)
	u, err := ulid.Parse(id.String())
	assert.NotNil(t, u)
	assert.Nil(t, err)
}

func TestPropertyIDFrom(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected struct {
			result PropertyID
			err    error
		}
	}{
		{
			name:  "Fail:Not valid string",
			input: "testMustFail",
			expected: struct {
				result PropertyID
				err    error
			}{
				result: PropertyID{},
				err:    ErrInvalidID,
			},
		},
		{
			name:  "Fail:Not valid string",
			input: "",
			expected: struct {
				result PropertyID
				err    error
			}{
				result: PropertyID{},
				err:    ErrInvalidID,
			},
		},
		{
			name:  "success:valid string",
			input: "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: struct {
				result PropertyID
				err    error
			}{
				result: PropertyID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
				err:    nil,
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result, err := PropertyIDFrom(tt.input)
			assert.Equal(t, tt.expected.result, result)
			if tt.expected.err != nil {
				assert.Equal(t, tt.expected.err, err)
			}
		})
	}
}

func TestMustPropertyID(t *testing.T) {
	tests := []struct {
		name        string
		input       string
		shouldPanic bool
		expected    PropertyID
	}{
		{
			name:        "Fail:Not valid string",
			input:       "testMustFail",
			shouldPanic: true,
		},
		{
			name:        "Fail:Not valid string",
			input:       "",
			shouldPanic: true,
		},
		{
			name:        "success:valid string",
			input:       "01f2r7kg1fvvffp0gmexgy5hxy",
			shouldPanic: false,
			expected:    PropertyID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			if tt.shouldPanic {
				assert.Panics(t, func() { MustBeID(tt.input) })
				return
			}
			result := MustPropertyID(tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func TestPropertyIDFromRef(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected *PropertyID
	}{
		{
			name:     "Fail:Not valid string",
			input:    "testMustFail",
			expected: nil,
		},
		{
			name:     "Fail:Not valid string",
			input:    "",
			expected: nil,
		},
		{
			name:     "success:valid string",
			input:    "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: &PropertyID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result := PropertyIDFromRef(&tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func TestPropertyIDFromRefID(t *testing.T) {
	id := New()
	id2 := PropertyIDFromRefID(&id)
	assert.Equal(t, id.id, id2.id)
	assert.Nil(t, PropertyIDFromRefID(nil))
	assert.Nil(t, PropertyIDFromRefID(&ID{}))
}

func TestPropertyID_ID(t *testing.T) {
	id := New()
	id2 := PropertyIDFromRefID(&id)
	assert.Equal(t, id, id2.ID())
}

func TestPropertyID_String(t *testing.T) {
	id := New()
	id2 := PropertyIDFromRefID(&id)
	assert.Equal(t, id.String(), id2.String())
	assert.Equal(t, "", PropertyID{}.String())
}

func TestPropertyID_RefString(t *testing.T) {
	id := NewPropertyID()
	assert.Equal(t, id.String(), *id.RefString())
	assert.Nil(t, PropertyID{}.RefString())
}

func TestPropertyID_GoString(t *testing.T) {
	id := New()
	id2 := PropertyIDFromRefID(&id)
	assert.Equal(t, "PropertyID("+id.String()+")", id2.GoString())
	assert.Equal(t, "PropertyID()", PropertyID{}.GoString())
}

func TestPropertyID_Ref(t *testing.T) {
	id := NewPropertyID()
	assert.Equal(t, PropertyID(id), *id.Ref())
	assert.Nil(t, (&PropertyID{}).Ref())
}

func TestPropertyID_Contains(t *testing.T) {
	id := NewPropertyID()
	id2 := NewPropertyID()
	assert.True(t, id.Contains([]PropertyID{id, id2}))
	assert.False(t, PropertyID{}.Contains([]PropertyID{id, id2, {}}))
	assert.False(t, id.Contains([]PropertyID{id2}))
}

func TestPropertyID_CopyRef(t *testing.T) {
	id := NewPropertyID().Ref()
	id2 := id.CopyRef()
	assert.Equal(t, id, id2)
	assert.NotSame(t, id, id2)
	assert.Nil(t, (*PropertyID)(nil).CopyRef())
}

func TestPropertyID_IDRef(t *testing.T) {
	id := New()
	id2 := PropertyIDFromRefID(&id)
	assert.Equal(t, &id, id2.IDRef())
	assert.Nil(t, (&PropertyID{}).IDRef())
	assert.Nil(t, (*PropertyID)(nil).IDRef())
}

func TestPropertyID_StringRef(t *testing.T) {
	id := NewPropertyID()
	assert.Equal(t, id.String(), *id.StringRef())
	assert.Nil(t, (&PropertyID{}).StringRef())
	assert.Nil(t, (*PropertyID)(nil).StringRef())
}

func TestPropertyID_MarhsalJSON(t *testing.T) {
	id := NewPropertyID()
	res, err := id.MarhsalJSON()
	assert.Nil(t, err)
	exp, _ := json.Marshal(id.String())
	assert.Equal(t, exp, res)

	res, err = (&PropertyID{}).MarhsalJSON()
	assert.Nil(t, err)
	assert.Nil(t, res)

	res, err = (*PropertyID)(nil).MarhsalJSON()
	assert.Nil(t, err)
	assert.Nil(t, res)
}

func TestPropertyID_UnmarhsalJSON(t *testing.T) {
	jsonString := "\"01f3zhkysvcxsnzepyyqtq21fb\""
	id := MustPropertyID("01f3zhkysvcxsnzepyyqtq21fb")
	id2 := &PropertyID{}
	err := id2.UnmarhsalJSON([]byte(jsonString))
	assert.Nil(t, err)
	assert.Equal(t, id, *id2)
}

func TestPropertyID_MarshalText(t *testing.T) {
	id := New()
	res, err := PropertyIDFromRefID(&id).MarshalText()
	assert.Nil(t, err)
	assert.Equal(t, []byte(id.String()), res)

	res, err = (&PropertyID{}).MarshalText()
	assert.Nil(t, err)
	assert.Nil(t, res)

	res, err = (*PropertyID)(nil).MarshalText()
	assert.Nil(t, err)
	assert.Nil(t, res)
}

func TestPropertyID_UnmarshalText(t *testing.T) {
	text := []byte("01f3zhcaq35403zdjnd6dcm0t2")
	id2 := &PropertyID{}
	err := id2.UnmarshalText(text)
	assert.Nil(t, err)
	assert.Equal(t, "01f3zhcaq35403zdjnd6dcm0t2", id2.String())
}

func TestPropertyID_IsNil(t *testing.T) {
	assert.True(t, PropertyID{}.IsNil())
	assert.False(t, NewPropertyID().IsNil())
}

func TestPropertyID_IsNilRef(t *testing.T) {
	assert.True(t, PropertyID{}.Ref().IsNilRef())
	assert.True(t, (*PropertyID)(nil).IsNilRef())
	assert.False(t, NewPropertyID().Ref().IsNilRef())
}

func TestPropertyIDsToStrings(t *testing.T) {
	tests := []struct {
		name     string
		input    []PropertyID
		expected []string
	}{
		{
			name:     "Empty slice",
			input:    make([]PropertyID, 0),
			expected: make([]string, 0),
		},
		{
			name:     "1 element",
			input:    []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
		},
		{
			name: "multiple elements",
			input: []PropertyID{
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tt.expected, PropertyIDsToStrings(tt.input))
		})
	}
}

func TestPropertyIDsFrom(t *testing.T) {
	tests := []struct {
		name     string
		input    []string
		expected struct {
			res []PropertyID
			err error
		}
	}{
		{
			name:  "Empty slice",
			input: make([]string, 0),
			expected: struct {
				res []PropertyID
				err error
			}{
				res: make([]PropertyID, 0),
				err: nil,
			},
		},
		{
			name:  "1 element",
			input: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
			expected: struct {
				res []PropertyID
				err error
			}{
				res: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2")},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []PropertyID
				err error
			}{
				res: []PropertyID{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
				err: nil,
			},
		},
		{
			name: "error",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"x",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []PropertyID
				err error
			}{
				res: nil,
				err: ErrInvalidID,
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res, err := PropertyIDsFrom(tc.input)
			if tc.expected.err != nil {
				assert.Equal(t, tc.expected.err, err)
				assert.Nil(t, res)
			} else {
				assert.Nil(t, err)
				assert.Equal(t, tc.expected.res, res)
			}
		})
	}
}

func TestPropertyIDsFromID(t *testing.T) {
	tests := []struct {
		name     string
		input    []ID
		expected []PropertyID
	}{
		{
			name:     "Empty slice",
			input:    make([]ID, 0),
			expected: make([]PropertyID, 0),
		},
		{
			name:     "1 element",
			input:    []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []PropertyID{
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := PropertyIDsFromID(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestPropertyIDsFromIDRef(t *testing.T) {
	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")

	tests := []struct {
		name     string
		input    []*ID
		expected []PropertyID
	}{
		{
			name:     "Empty slice",
			input:    make([]*ID, 0),
			expected: make([]PropertyID, 0),
		},
		{
			name:     "1 element",
			input:    []*ID{&id1},
			expected: []PropertyID{MustPropertyID(id1.String())},
		},
		{
			name:  "multiple elements",
			input: []*ID{&id1, &id2, &id3},
			expected: []PropertyID{
				MustPropertyID(id1.String()),
				MustPropertyID(id2.String()),
				MustPropertyID(id3.String()),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := PropertyIDsFromIDRef(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestPropertyIDsToID(t *testing.T) {
	tests := []struct {
		name     string
		input    []PropertyID
		expected []ID
	}{
		{
			name:     "Empty slice",
			input:    make([]PropertyID, 0),
			expected: make([]ID, 0),
		},
		{
			name:     "1 element",
			input:    []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []PropertyID{
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := PropertyIDsToID(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestPropertyIDsToIDRef(t *testing.T) {
	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id21 := MustPropertyID(id1.String())
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id22 := MustPropertyID(id2.String())
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")
	id23 := MustPropertyID(id3.String())

	tests := []struct {
		name     string
		input    []*PropertyID
		expected []*ID
	}{
		{
			name:     "Empty slice",
			input:    make([]*PropertyID, 0),
			expected: make([]*ID, 0),
		},
		{
			name:     "1 element",
			input:    []*PropertyID{&id21},
			expected: []*ID{&id1},
		},
		{
			name:     "multiple elements",
			input:    []*PropertyID{&id21, &id22, &id23},
			expected: []*ID{&id1, &id2, &id3},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := PropertyIDsToIDRef(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestNewPropertyIDSet(t *testing.T) {
	PropertyIdSet := NewPropertyIDSet()
	assert.NotNil(t, PropertyIdSet)
	assert.Empty(t, PropertyIdSet.m)
	assert.Empty(t, PropertyIdSet.s)
}

func TestPropertyIDSet_Add(t *testing.T) {
	tests := []struct {
		name     string
		input    []PropertyID
		expected *PropertyIDSet
	}{
		{
			name:  "Empty slice",
			input: make([]PropertyID, 0),
			expected: &PropertyIDSet{
				m: map[PropertyID]struct{}{},
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: &PropertyIDSet{
				m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: []PropertyID{
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &PropertyIDSet{
				m: map[PropertyID]struct{}{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []PropertyID{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
		{
			name: "multiple elements with duplication",
			input: []PropertyID{
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &PropertyIDSet{
				m: map[PropertyID]struct{}{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []PropertyID{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			set := NewPropertyIDSet()
			set.Add(tc.input...)
			assert.Equal(t, tc.expected, set)
		})
	}
}

func TestPropertyIDSet_AddRef(t *testing.T) {
	tests := []struct {
		name     string
		input    *PropertyID
		expected *PropertyIDSet
	}{
		{
			name:  "Empty slice",
			input: nil,
			expected: &PropertyIDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1").Ref(),
			expected: &PropertyIDSet{
				m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			set := NewPropertyIDSet()
			set.AddRef(tc.input)
			assert.Equal(t, tc.expected, set)
		})
	}
}

func TestPropertyIDSet_Has(t *testing.T) {
	tests := []struct {
		name     string
		target   *PropertyIDSet
		input    PropertyID
		expected bool
	}{
		{
			name:     "Empty Set",
			target:   &PropertyIDSet{},
			input:    MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
			expected: false,
		},
		{
			name: "Set Contains the element",
			target: &PropertyIDSet{
				m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			input:    MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
			expected: true,
		},
		{
			name: "Set does not Contains the element",
			target: &PropertyIDSet{
				m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			input:    MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
			expected: false,
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.target.Has(tc.input))
		})
	}
}

func TestPropertyIDSet_Clear(t *testing.T) {
	tests := []struct {
		name     string
		input    *PropertyIDSet
		expected *PropertyIDSet
	}{
		{
			name:     "Empty set",
			input:    &PropertyIDSet{},
			expected: &PropertyIDSet{},
		},
		{
			name:     "Nil set",
			input:    nil,
			expected: nil,
		},
		{
			name: "Contains the element",
			input: &PropertyIDSet{
				m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &PropertyIDSet{
				m: nil,
				s: nil,
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			tc.input.Clear()
			assert.Equal(t, tc.expected, tc.input)
		})
	}
}

func TestPropertyIDSet_All(t *testing.T) {
	tests := []struct {
		name     string
		input    *PropertyIDSet
		expected []PropertyID
	}{
		{
			name: "Empty",
			input: &PropertyIDSet{
				m: map[PropertyID]struct{}{},
				s: nil,
			},
			expected: make([]PropertyID, 0),
		},
		{
			name:     "Nil",
			input:    nil,
			expected: nil,
		},
		{
			name: "1 element",
			input: &PropertyIDSet{
				m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
		},
		{
			name: "multiple elements",
			input: &PropertyIDSet{
				m: map[PropertyID]struct{}{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []PropertyID{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: []PropertyID{
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.input.All())
		})
	}
}

func TestPropertyIDSet_Clone(t *testing.T) {
	tests := []struct {
		name     string
		input    *PropertyIDSet
		expected *PropertyIDSet
	}{
		{
			name:     "nil set",
			input:    nil,
			expected: NewPropertyIDSet(),
		},
		{
			name:     "Empty set",
			input:    NewPropertyIDSet(),
			expected: NewPropertyIDSet(),
		},
		{
			name: "1 element",
			input: &PropertyIDSet{
				m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &PropertyIDSet{
				m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: &PropertyIDSet{
				m: map[PropertyID]struct{}{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []PropertyID{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: &PropertyIDSet{
				m: map[PropertyID]struct{}{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []PropertyID{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			clone := tc.input.Clone()
			assert.Equal(t, tc.expected, clone)
			assert.NotSame(t, tc.input, clone)
		})
	}
}

func TestPropertyIDSet_Merge(t *testing.T) {
	tests := []struct {
		name  string
		input struct {
			a *PropertyIDSet
			b *PropertyIDSet
		}
		expected *PropertyIDSet
	}{
		{
			name: "Nil Set",
			input: struct {
				a *PropertyIDSet
				b *PropertyIDSet
			}{
				a: &PropertyIDSet{
					m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: nil,
			},
			expected: &PropertyIDSet{
				m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "Empty Set",
			input: struct {
				a *PropertyIDSet
				b *PropertyIDSet
			}{
				a: &PropertyIDSet{},
				b: &PropertyIDSet{},
			},
			expected: &PropertyIDSet{},
		},
		{
			name: "1 Empty Set",
			input: struct {
				a *PropertyIDSet
				b *PropertyIDSet
			}{
				a: &PropertyIDSet{
					m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &PropertyIDSet{},
			},
			expected: &PropertyIDSet{
				m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "2 non Empty Set",
			input: struct {
				a *PropertyIDSet
				b *PropertyIDSet
			}{
				a: &PropertyIDSet{
					m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &PropertyIDSet{
					m: map[PropertyID]struct{}{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"): {}},
					s: []PropertyID{MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2")},
				},
			},
			expected: &PropertyIDSet{
				m: map[PropertyID]struct{}{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"): {},
				},
				s: []PropertyID{
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustPropertyID("01f3zhcaq35403zdjnd6dcm0t2"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.input.a.Merge(tc.input.b))
		})
	}
}
