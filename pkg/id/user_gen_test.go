// Code generated by gen, DO NOT EDIT.

package id

import (
	"encoding/json"
	"errors"
	"testing"

	"github.com/oklog/ulid"
	"github.com/stretchr/testify/assert"
)

func TestNewUserID(t *testing.T) {
	id := NewUserID()
	assert.NotNil(t, id)
	ulID, err := ulid.Parse(id.String())

	assert.NotNil(t, ulID)
	assert.Nil(t, err)
}

func TestUserIDFrom(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    string
		expected struct {
			result UserID
			err    error
		}
	}{
		{
			name:  "Fail:Not valid string",
			input: "testMustFail",
			expected: struct {
				result UserID
				err    error
			}{
				UserID{},
				ErrInvalidID,
			},
		},
		{
			name:  "Fail:Not valid string",
			input: "",
			expected: struct {
				result UserID
				err    error
			}{
				UserID{},
				ErrInvalidID,
			},
		},
		{
			name:  "success:valid string",
			input: "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: struct {
				result UserID
				err    error
			}{
				UserID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
				nil,
			},
		},
	}
	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			result, err := UserIDFrom(tc.input)
			assert.Equal(tt, tc.expected.result, result)
			if err != nil {
				assert.True(tt, errors.As(tc.expected.err, &err))
			}
		})
	}
}

func TestMustUserID(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name        string
		input       string
		shouldPanic bool
		expected    UserID
	}{
		{
			name:        "Fail:Not valid string",
			input:       "testMustFail",
			shouldPanic: true,
		},
		{
			name:        "Fail:Not valid string",
			input:       "",
			shouldPanic: true,
		},
		{
			name:        "success:valid string",
			input:       "01f2r7kg1fvvffp0gmexgy5hxy",
			shouldPanic: false,
			expected:    UserID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}
	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			if tc.shouldPanic {
				assert.Panics(tt, func() { MustBeID(tc.input) })
				return
			}
			result := MustUserID(tc.input)
			assert.Equal(tt, tc.expected, result)
		})
	}
}

func TestUserIDFromRef(t *testing.T) {
	testCases := []struct {
		name     string
		input    string
		expected *UserID
	}{
		{
			name:     "Fail:Not valid string",
			input:    "testMustFail",
			expected: nil,
		},
		{
			name:     "Fail:Not valid string",
			input:    "",
			expected: nil,
		},
		{
			name:     "success:valid string",
			input:    "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: &UserID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}
	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			result := UserIDFromRef(&tc.input)
			assert.Equal(tt, tc.expected, result)
			if tc.expected != nil {
				assert.Equal(tt, *tc.expected, *result)
			}
		})
	}
}

func TestUserIDFromRefID(t *testing.T) {
	id := New()

	subId := UserIDFromRefID(&id)

	assert.NotNil(t, subId)
	assert.Equal(t, subId.id, id.id)
}

func TestUserID_ID(t *testing.T) {
	id := New()
	subId := UserIDFromRefID(&id)

	idOrg := subId.ID()

	assert.Equal(t, id, idOrg)
}

func TestUserID_String(t *testing.T) {
	id := New()
	subId := UserIDFromRefID(&id)

	assert.Equal(t, subId.String(), id.String())
}

func TestUserID_GoString(t *testing.T) {
	id := New()
	subId := UserIDFromRefID(&id)

	assert.Equal(t, subId.GoString(), "id.UserID("+id.String()+")")
}

func TestUserID_RefString(t *testing.T) {
	id := New()
	subId := UserIDFromRefID(&id)

	refString := subId.StringRef()

	assert.NotNil(t, refString)
	assert.Equal(t, *refString, id.String())
}

func TestUserID_Ref(t *testing.T) {
	id := New()
	subId := UserIDFromRefID(&id)

	subIdRef := subId.Ref()

	assert.Equal(t, *subId, *subIdRef)
	// TODO: check why this not working
	//assert.True(t, subId == subIdRef)
}

func TestUserID_CopyRef(t *testing.T) {
	id := New()
	subId := UserIDFromRefID(&id)

	subIdCopyRef := subId.CopyRef()

	assert.Equal(t, *subId, *subIdCopyRef)
	assert.False(t, subId == subIdCopyRef)
}

func TestUserID_IDRef(t *testing.T) {
	id := New()
	subId := UserIDFromRefID(&id)

	assert.Equal(t, id, *subId.IDRef())
}

func TestUserID_StringRef(t *testing.T) {
	id := New()
	subId := UserIDFromRefID(&id)

	assert.Equal(t, *subId.StringRef(), id.String())
}

func TestUserID_MarhsalJSON(t *testing.T) {
	id := New()
	subId := UserIDFromRefID(&id)

	res, err := subId.MarhsalJSON()
	exp, _ := json.Marshal(subId.String())

	assert.Nil(t, err)
	assert.Equal(t, exp, res)
}

func TestUserID_UnmarhsalJSON(t *testing.T) {
	jsonString := "\"01f3zhkysvcxsnzepyyqtq21fb\""

	subId := &UserID{}

	err := subId.UnmarhsalJSON([]byte(jsonString))

	assert.Nil(t, err)
	assert.Equal(t, "01f3zhkysvcxsnzepyyqtq21fb", subId.String())
}

func TestUserID_MarshalText(t *testing.T) {
	id := New()
	subId := UserIDFromRefID(&id)

	res, err := subId.MarshalText()

	assert.Nil(t, err)
	assert.Equal(t, []byte(id.String()), res)
}

func TestUserID_UnmarshalText(t *testing.T) {
	text := []byte("01f3zhcaq35403zdjnd6dcm0t2")

	subId := &UserID{}

	err := subId.UnmarshalText(text)

	assert.Nil(t, err)
	assert.Equal(t, "01f3zhcaq35403zdjnd6dcm0t2", subId.String())

}

func TestUserID_IsNil(t *testing.T) {
	subId := UserID{}

	assert.True(t, subId.IsNil())

	id := New()
	subId = *UserIDFromRefID(&id)

	assert.False(t, subId.IsNil())
}

func TestUserIDToKeys(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    []UserID
		expected []string
	}{
		{
			name:     "Empty slice",
			input:    make([]UserID, 0),
			expected: make([]string, 0),
		},
		{
			name:     "1 element",
			input:    []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
		},
		{
			name: "multiple elements",
			input: []UserID{
				MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			assert.Equal(tt, tc.expected, UserIDToKeys(tc.input))
		})
	}

}

func TestUserIDsFrom(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    []string
		expected struct {
			res []UserID
			err error
		}
	}{
		{
			name:  "Empty slice",
			input: make([]string, 0),
			expected: struct {
				res []UserID
				err error
			}{
				res: make([]UserID, 0),
				err: nil,
			},
		},
		{
			name:  "1 element",
			input: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
			expected: struct {
				res []UserID
				err error
			}{
				res: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t2")},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []UserID
				err error
			}{
				res: []UserID{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []UserID
				err error
			}{
				res: nil,
				err: ErrInvalidID,
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			if tc.expected.err != nil {
				_, err := UserIDsFrom(tc.input)
				assert.True(tt, errors.As(ErrInvalidID, &err))
			} else {
				res, err := UserIDsFrom(tc.input)
				assert.Equal(tt, tc.expected.res, res)
				assert.Nil(tt, err)
			}

		})
	}
}

func TestUserIDsFromID(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    []ID
		expected []UserID
	}{
		{
			name:     "Empty slice",
			input:    make([]ID, 0),
			expected: make([]UserID, 0),
		},
		{
			name:     "1 element",
			input:    []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []UserID{
				MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := UserIDsFromID(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestUserIDsFromIDRef(t *testing.T) {
	t.Parallel()

	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")

	testCases := []struct {
		name     string
		input    []*ID
		expected []UserID
	}{
		{
			name:     "Empty slice",
			input:    make([]*ID, 0),
			expected: make([]UserID, 0),
		},
		{
			name:     "1 element",
			input:    []*ID{&id1},
			expected: []UserID{MustUserID(id1.String())},
		},
		{
			name:  "multiple elements",
			input: []*ID{&id1, &id2, &id3},
			expected: []UserID{
				MustUserID(id1.String()),
				MustUserID(id2.String()),
				MustUserID(id3.String()),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := UserIDsFromIDRef(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestUserIDsToID(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    []UserID
		expected []ID
	}{
		{
			name:     "Empty slice",
			input:    make([]UserID, 0),
			expected: make([]ID, 0),
		},
		{
			name:     "1 element",
			input:    []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []UserID{
				MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := UserIDsToID(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestUserIDsToIDRef(t *testing.T) {
	t.Parallel()

	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	subId1 := MustUserID(id1.String())
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	subId2 := MustUserID(id2.String())
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")
	subId3 := MustUserID(id3.String())

	testCases := []struct {
		name     string
		input    []*UserID
		expected []*ID
	}{
		{
			name:     "Empty slice",
			input:    make([]*UserID, 0),
			expected: make([]*ID, 0),
		},
		{
			name:     "1 element",
			input:    []*UserID{&subId1},
			expected: []*ID{&id1},
		},
		{
			name:     "multiple elements",
			input:    []*UserID{&subId1, &subId2, &subId3},
			expected: []*ID{&id1, &id2, &id3},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := UserIDsToIDRef(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestNewUserIDSet(t *testing.T) {
	UserIdSet := NewUserIDSet()

	assert.NotNil(t, UserIdSet)
	assert.Empty(t, UserIdSet.m)
	assert.Empty(t, UserIdSet.s)
}

func TestUserIDSet_Add(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    []UserID
		expected *UserIDSet
	}{
		{
			name:  "Empty slice",
			input: make([]UserID, 0),
			expected: &UserIDSet{
				m: map[UserID]struct{}{},
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: &UserIDSet{
				m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: []UserID{
				MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &UserIDSet{
				m: map[UserID]struct{}{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{},
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"): struct{}{},
				},
				s: []UserID{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
		{
			name: "multiple elements with duplication",
			input: []UserID{
				MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &UserIDSet{
				m: map[UserID]struct{}{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"): struct{}{},
				},
				s: []UserID{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			set := NewUserIDSet()
			set.Add(tc.input...)
			assert.Equal(tt, tc.expected, set)
		})
	}
}

func TestUserIDSet_AddRef(t *testing.T) {
	t.Parallel()

	UserId := MustUserID("01f3zhcaq35403zdjnd6dcm0t1")

	testCases := []struct {
		name     string
		input    *UserID
		expected *UserIDSet
	}{
		{
			name:  "Empty slice",
			input: nil,
			expected: &UserIDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: &UserId,
			expected: &UserIDSet{
				m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			set := NewUserIDSet()
			set.AddRef(tc.input)
			assert.Equal(tt, tc.expected, set)
		})
	}
}

func TestUserIDSet_Has(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name  string
		input struct {
			UserIDSet
			UserID
		}
		expected bool
	}{
		{
			name: "Empty Set",
			input: struct {
				UserIDSet
				UserID
			}{UserIDSet: UserIDSet{}, UserID: MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: false,
		},
		{
			name: "Set Contains the element",
			input: struct {
				UserIDSet
				UserID
			}{UserIDSet: UserIDSet{
				m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			}, UserID: MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: true,
		},
		{
			name: "Set does not Contains the element",
			input: struct {
				UserIDSet
				UserID
			}{UserIDSet: UserIDSet{
				m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			}, UserID: MustUserID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: false,
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			assert.Equal(tt, tc.expected, tc.input.UserIDSet.Has(tc.input.UserID))
		})
	}
}

func TestUserIDSet_Clear(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    UserIDSet
		expected UserIDSet
	}{
		{
			name:  "Empty Set",
			input: UserIDSet{},
			expected: UserIDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name: "Set Contains the element",
			input: UserIDSet{
				m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: UserIDSet{
				m: nil,
				s: nil,
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			set := tc.input
			p := &set
			p.Clear()
			assert.Equal(tt, tc.expected, *p)
		})
	}
}

func TestUserIDSet_All(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    *UserIDSet
		expected []UserID
	}{
		{
			name: "Empty slice",
			input: &UserIDSet{
				m: map[UserID]struct{}{},
				s: nil,
			},
			expected: make([]UserID, 0),
		},
		{
			name: "1 element",
			input: &UserIDSet{
				m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
		},
		{
			name: "multiple elements",
			input: &UserIDSet{
				m: map[UserID]struct{}{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{},
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"): struct{}{},
				},
				s: []UserID{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: []UserID{
				MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			assert.Equal(tt, tc.expected, tc.input.All())
		})
	}
}

func TestUserIDSet_Clone(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    *UserIDSet
		expected *UserIDSet
	}{
		{
			name:     "nil set",
			input:    nil,
			expected: NewUserIDSet(),
		},
		{
			name:     "Empty set",
			input:    NewUserIDSet(),
			expected: NewUserIDSet(),
		},
		{
			name: "1 element",
			input: &UserIDSet{
				m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &UserIDSet{
				m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: &UserIDSet{
				m: map[UserID]struct{}{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{},
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"): struct{}{},
				},
				s: []UserID{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: &UserIDSet{
				m: map[UserID]struct{}{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{},
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"): struct{}{},
				},
				s: []UserID{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			clone := tc.input.Clone()
			assert.Equal(tt, tc.expected, clone)
			assert.False(tt, tc.input == clone)
		})
	}
}

func TestUserIDSet_Merge(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name  string
		input struct {
			a *UserIDSet
			b *UserIDSet
		}
		expected *UserIDSet
	}{
		{
			name: "Empty Set",
			input: struct {
				a *UserIDSet
				b *UserIDSet
			}{
				a: &UserIDSet{},
				b: &UserIDSet{},
			},
			expected: &UserIDSet{},
		},
		{
			name: "1 Empty Set",
			input: struct {
				a *UserIDSet
				b *UserIDSet
			}{
				a: &UserIDSet{
					m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
					s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &UserIDSet{},
			},
			expected: &UserIDSet{
				m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
				s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "2 non Empty Set",
			input: struct {
				a *UserIDSet
				b *UserIDSet
			}{
				a: &UserIDSet{
					m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{}},
					s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &UserIDSet{
					m: map[UserID]struct{}{MustUserID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{}},
					s: []UserID{MustUserID("01f3zhcaq35403zdjnd6dcm0t2")},
				},
			},
			expected: &UserIDSet{
				m: map[UserID]struct{}{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"): struct{}{},
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"): struct{}{},
				},
				s: []UserID{
					MustUserID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustUserID("01f3zhcaq35403zdjnd6dcm0t2"),
				},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			assert.Equal(tt, tc.expected, tc.input.a.Merge(tc.input.b))
		})
	}
}
