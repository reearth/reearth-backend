// Code generated by gen, DO NOT EDIT.

package id

import "encoding/json"

// DatasetID is an ID for Dataset.
type DatasetID ID

// NewDatasetID generates a new DatasetId.
func NewDatasetID() DatasetID {
	return DatasetID(New())
}

// DatasetIDFrom generates a new DatasetID from a string.
func DatasetIDFrom(i string) (nid DatasetID, err error) {
	var did ID
	did, err = FromID(i)
	if err != nil {
		return
	}
	nid = DatasetID(did)
	return
}

// MustDatasetID generates a new DatasetID from a string, but panics if the string cannot be parsed.
func MustDatasetID(i string) DatasetID {
	did, err := FromID(i)
	if err != nil {
		panic(err)
	}
	return DatasetID(did)
}

// DatasetIDFromRef generates a new DatasetID from a string ref.
func DatasetIDFromRef(i *string) *DatasetID {
	did := FromIDRef(i)
	if did == nil {
		return nil
	}
	nid := DatasetID(*did)
	return &nid
}

// DatasetIDFromRefID generates a new DatasetID from a ref of a generic ID.
func DatasetIDFromRefID(i *ID) *DatasetID {
	if i == nil || i.IsNil() {
		return nil
	}
	nid := DatasetID(*i)
	return &nid
}

// ID returns a domain ID.
func (d DatasetID) ID() ID {
	return ID(d)
}

// String returns a string representation.
func (d DatasetID) String() string {
	if d.IsNil() {
		return ""
	}
	return ID(d).String()
}

// StringRef returns a reference of the string representation.
func (d DatasetID) RefString() *string {
	if d.IsNil() {
		return nil
	}
	str := d.String()
	return &str
}

// GoString implements fmt.GoStringer interface.
func (d DatasetID) GoString() string {
	return "DatasetID(" + d.String() + ")"
}

// Ref returns a reference.
func (d DatasetID) Ref() *DatasetID {
	if d.IsNil() {
		return nil
	}
	d2 := d
	return &d2
}

// Contains returns whether the id is contained in the slice.
func (d DatasetID) Contains(ids []DatasetID) bool {
	if d.IsNil() {
		return false
	}
	for _, i := range ids {
		if d.ID().Equal(i.ID()) {
			return true
		}
	}
	return false
}

// CopyRef returns a copy of a reference.
func (d *DatasetID) CopyRef() *DatasetID {
	if d.IsNilRef() {
		return nil
	}
	d2 := *d
	return &d2
}

// IDRef returns a reference of a domain id.
func (d *DatasetID) IDRef() *ID {
	if d.IsNilRef() {
		return nil
	}
	id := ID(*d)
	return &id
}

// StringRef returns a reference of a string representation.
func (d *DatasetID) StringRef() *string {
	if d.IsNilRef() {
		return nil
	}
	id := ID(*d).String()
	return &id
}

// MarhsalJSON implements json.Marhsaler interface
func (d *DatasetID) MarhsalJSON() ([]byte, error) {
	if d.IsNilRef() {
		return nil, nil
	}
	return json.Marshal(d.String())
}

// UnmarhsalJSON implements json.Unmarshaler interface
func (d *DatasetID) UnmarhsalJSON(bs []byte) (err error) {
	var idstr string
	if err = json.Unmarshal(bs, &idstr); err != nil {
		return
	}
	*d, err = DatasetIDFrom(idstr)
	return
}

// MarshalText implements encoding.TextMarshaler interface
func (d *DatasetID) MarshalText() ([]byte, error) {
	if d.IsNilRef() {
		return nil, nil
	}
	return []byte(d.String()), nil
}

// UnmarshalText implements encoding.TextUnmarshaler interface
func (d *DatasetID) UnmarshalText(text []byte) (err error) {
	*d, err = DatasetIDFrom(string(text))
	return
}

// IsNil returns true if a ID is zero-value
func (d DatasetID) IsNil() bool {
	return ID(d).IsNil()
}

// IsNilRef returns true if a ID is nil or zero-value
func (d *DatasetID) IsNilRef() bool {
	return d == nil || ID(*d).IsNil()
}

// DatasetIDsToStrings converts IDs into a string slice.
func DatasetIDsToStrings(ids []DatasetID) []string {
	strs := make([]string, 0, len(ids))
	for _, i := range ids {
		strs = append(strs, i.String())
	}
	return strs
}

// DatasetIDsFrom converts a string slice into a ID slice.
func DatasetIDsFrom(ids []string) ([]DatasetID, error) {
	dids := make([]DatasetID, 0, len(ids))
	for _, i := range ids {
		did, err := DatasetIDFrom(i)
		if err != nil {
			return nil, err
		}
		dids = append(dids, did)
	}
	return dids, nil
}

// DatasetIDsFromID converts a generic ID slice into a ID slice.
func DatasetIDsFromID(ids []ID) []DatasetID {
	dids := make([]DatasetID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, DatasetID(i))
	}
	return dids
}

// DatasetIDsFromIDRef converts a ref of a generic ID slice into a ID slice.
func DatasetIDsFromIDRef(ids []*ID) []DatasetID {
	dids := make([]DatasetID, 0, len(ids))
	for _, i := range ids {
		if i != nil {
			dids = append(dids, DatasetID(*i))
		}
	}
	return dids
}

// DatasetIDsToID converts a ID slice into a generic ID slice.
func DatasetIDsToID(ids []DatasetID) []ID {
	dids := make([]ID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, i.ID())
	}
	return dids
}

// DatasetIDsToIDRef converts a ID ref slice into a generic ID ref slice.
func DatasetIDsToIDRef(ids []*DatasetID) []*ID {
	dids := make([]*ID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, i.IDRef())
	}
	return dids
}

// DatasetIDSet represents a set of DatasetIDs
type DatasetIDSet struct {
	m map[DatasetID]struct{}
	s []DatasetID
}

// NewDatasetIDSet creates a new DatasetIDSet
func NewDatasetIDSet(p ...DatasetID) *DatasetIDSet {
	s := &DatasetIDSet{}
	s.Add(p...)
	return s
}

// Add adds a new ID if it does not exists in the set
func (s *DatasetIDSet) Add(p ...DatasetID) {
	if s == nil || p == nil {
		return
	}
	if s.m == nil {
		s.m = map[DatasetID]struct{}{}
	}
	for _, i := range p {
		if _, ok := s.m[i]; !ok {
			if s.s == nil {
				s.s = []DatasetID{}
			}
			s.m[i] = struct{}{}
			s.s = append(s.s, i)
		}
	}
}

// AddRef adds a new ID ref if it does not exists in the set
func (s *DatasetIDSet) AddRef(p *DatasetID) {
	if s == nil || p == nil {
		return
	}
	s.Add(*p)
}

// Has checks if the ID exists in the set
func (s *DatasetIDSet) Has(p DatasetID) bool {
	if s == nil || s.m == nil {
		return false
	}
	_, ok := s.m[p]
	return ok
}

// Clear clears all stored IDs
func (s *DatasetIDSet) Clear() {
	if s == nil {
		return
	}
	s.m = nil
	s.s = nil
}

// All returns stored all IDs as a slice
func (s *DatasetIDSet) All() []DatasetID {
	if s == nil {
		return nil
	}
	return append([]DatasetID{}, s.s...)
}

// Clone returns a cloned set
func (s *DatasetIDSet) Clone() *DatasetIDSet {
	if s == nil {
		return NewDatasetIDSet()
	}
	s2 := NewDatasetIDSet()
	s2.Add(s.s...)
	return s2
}

// Merge returns a merged set
func (s *DatasetIDSet) Merge(s2 *DatasetIDSet) *DatasetIDSet {
	s3 := s.Clone()
	if s2 == nil {
		return s3
	}
	s3.Add(s2.s...)
	return s3
}
