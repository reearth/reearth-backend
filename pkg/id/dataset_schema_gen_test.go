// Code generated by gen, DO NOT EDIT.

package id

import (
	"encoding/json"
	"testing"

	"github.com/oklog/ulid"
	"github.com/stretchr/testify/assert"
)

func TestNewDatasetSchemaID(t *testing.T) {
	id := NewDatasetSchemaID()
	assert.NotNil(t, id)
	u, err := ulid.Parse(id.String())
	assert.NotNil(t, u)
	assert.Nil(t, err)
}

func TestDatasetSchemaIDFrom(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected struct {
			result DatasetSchemaID
			err    error
		}
	}{
		{
			name:  "Fail:Not valid string",
			input: "testMustFail",
			expected: struct {
				result DatasetSchemaID
				err    error
			}{
				result: DatasetSchemaID{},
				err:    ErrInvalidID,
			},
		},
		{
			name:  "Fail:Not valid string",
			input: "",
			expected: struct {
				result DatasetSchemaID
				err    error
			}{
				result: DatasetSchemaID{},
				err:    ErrInvalidID,
			},
		},
		{
			name:  "success:valid string",
			input: "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: struct {
				result DatasetSchemaID
				err    error
			}{
				result: DatasetSchemaID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
				err:    nil,
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result, err := DatasetSchemaIDFrom(tt.input)
			assert.Equal(t, tt.expected.result, result)
			if tt.expected.err != nil {
				assert.Equal(t, tt.expected.err, err)
			}
		})
	}
}

func TestMustDatasetSchemaID(t *testing.T) {
	tests := []struct {
		name        string
		input       string
		shouldPanic bool
		expected    DatasetSchemaID
	}{
		{
			name:        "Fail:Not valid string",
			input:       "testMustFail",
			shouldPanic: true,
		},
		{
			name:        "Fail:Not valid string",
			input:       "",
			shouldPanic: true,
		},
		{
			name:        "success:valid string",
			input:       "01f2r7kg1fvvffp0gmexgy5hxy",
			shouldPanic: false,
			expected:    DatasetSchemaID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			if tt.shouldPanic {
				assert.Panics(t, func() { MustBeID(tt.input) })
				return
			}
			result := MustDatasetSchemaID(tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func TestDatasetSchemaIDFromRef(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected *DatasetSchemaID
	}{
		{
			name:     "Fail:Not valid string",
			input:    "testMustFail",
			expected: nil,
		},
		{
			name:     "Fail:Not valid string",
			input:    "",
			expected: nil,
		},
		{
			name:     "success:valid string",
			input:    "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: &DatasetSchemaID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result := DatasetSchemaIDFromRef(&tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func TestDatasetSchemaIDFromRefID(t *testing.T) {
	id := New()
	id2 := DatasetSchemaIDFromRefID(&id)
	assert.Equal(t, id.id, id2.id)
	assert.Nil(t, DatasetSchemaIDFromRefID(nil))
	assert.Nil(t, DatasetSchemaIDFromRefID(&ID{}))
}

func TestDatasetSchemaID_ID(t *testing.T) {
	id := New()
	id2 := DatasetSchemaIDFromRefID(&id)
	assert.Equal(t, id, id2.ID())
}

func TestDatasetSchemaID_String(t *testing.T) {
	id := New()
	id2 := DatasetSchemaIDFromRefID(&id)
	assert.Equal(t, id.String(), id2.String())
	assert.Equal(t, "", DatasetSchemaID{}.String())
}

func TestDatasetSchemaID_RefString(t *testing.T) {
	id := NewDatasetSchemaID()
	assert.Equal(t, id.String(), *id.RefString())
	assert.Nil(t, DatasetSchemaID{}.RefString())
}

func TestDatasetSchemaID_GoString(t *testing.T) {
	id := New()
	id2 := DatasetSchemaIDFromRefID(&id)
	assert.Equal(t, "DatasetSchemaID("+id.String()+")", id2.GoString())
	assert.Equal(t, "DatasetSchemaID()", DatasetSchemaID{}.GoString())
}

func TestDatasetSchemaID_Ref(t *testing.T) {
	id := NewDatasetSchemaID()
	assert.Equal(t, DatasetSchemaID(id), *id.Ref())
	assert.Nil(t, (&DatasetSchemaID{}).Ref())
}

func TestDatasetSchemaID_Contains(t *testing.T) {
	id := NewDatasetSchemaID()
	id2 := NewDatasetSchemaID()
	assert.True(t, id.Contains([]DatasetSchemaID{id, id2}))
	assert.False(t, DatasetSchemaID{}.Contains([]DatasetSchemaID{id, id2, {}}))
	assert.False(t, id.Contains([]DatasetSchemaID{id2}))
}

func TestDatasetSchemaID_CopyRef(t *testing.T) {
	id := NewDatasetSchemaID().Ref()
	id2 := id.CopyRef()
	assert.Equal(t, id, id2)
	assert.NotSame(t, id, id2)
	assert.Nil(t, (*DatasetSchemaID)(nil).CopyRef())
}

func TestDatasetSchemaID_IDRef(t *testing.T) {
	id := New()
	id2 := DatasetSchemaIDFromRefID(&id)
	assert.Equal(t, &id, id2.IDRef())
	assert.Nil(t, (&DatasetSchemaID{}).IDRef())
	assert.Nil(t, (*DatasetSchemaID)(nil).IDRef())
}

func TestDatasetSchemaID_StringRef(t *testing.T) {
	id := NewDatasetSchemaID()
	assert.Equal(t, id.String(), *id.StringRef())
	assert.Nil(t, (&DatasetSchemaID{}).StringRef())
	assert.Nil(t, (*DatasetSchemaID)(nil).StringRef())
}

func TestDatasetSchemaID_MarhsalJSON(t *testing.T) {
	id := NewDatasetSchemaID()
	res, err := id.MarhsalJSON()
	assert.Nil(t, err)
	exp, _ := json.Marshal(id.String())
	assert.Equal(t, exp, res)

	res, err = (&DatasetSchemaID{}).MarhsalJSON()
	assert.Nil(t, err)
	assert.Nil(t, res)

	res, err = (*DatasetSchemaID)(nil).MarhsalJSON()
	assert.Nil(t, err)
	assert.Nil(t, res)
}

func TestDatasetSchemaID_UnmarhsalJSON(t *testing.T) {
	jsonString := "\"01f3zhkysvcxsnzepyyqtq21fb\""
	id := MustDatasetSchemaID("01f3zhkysvcxsnzepyyqtq21fb")
	id2 := &DatasetSchemaID{}
	err := id2.UnmarhsalJSON([]byte(jsonString))
	assert.Nil(t, err)
	assert.Equal(t, id, *id2)
}

func TestDatasetSchemaID_MarshalText(t *testing.T) {
	id := New()
	res, err := DatasetSchemaIDFromRefID(&id).MarshalText()
	assert.Nil(t, err)
	assert.Equal(t, []byte(id.String()), res)

	res, err = (&DatasetSchemaID{}).MarshalText()
	assert.Nil(t, err)
	assert.Nil(t, res)

	res, err = (*DatasetSchemaID)(nil).MarshalText()
	assert.Nil(t, err)
	assert.Nil(t, res)
}

func TestDatasetSchemaID_UnmarshalText(t *testing.T) {
	text := []byte("01f3zhcaq35403zdjnd6dcm0t2")
	id2 := &DatasetSchemaID{}
	err := id2.UnmarshalText(text)
	assert.Nil(t, err)
	assert.Equal(t, "01f3zhcaq35403zdjnd6dcm0t2", id2.String())
}

func TestDatasetSchemaID_IsNil(t *testing.T) {
	assert.True(t, DatasetSchemaID{}.IsNil())
	assert.False(t, NewDatasetSchemaID().IsNil())
}

func TestDatasetSchemaID_IsNilRef(t *testing.T) {
	assert.True(t, DatasetSchemaID{}.Ref().IsNilRef())
	assert.True(t, (*DatasetSchemaID)(nil).IsNilRef())
	assert.False(t, NewDatasetSchemaID().Ref().IsNilRef())
}

func TestDatasetSchemaIDsToStrings(t *testing.T) {
	tests := []struct {
		name     string
		input    []DatasetSchemaID
		expected []string
	}{
		{
			name:     "Empty slice",
			input:    make([]DatasetSchemaID, 0),
			expected: make([]string, 0),
		},
		{
			name:     "1 element",
			input:    []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
		},
		{
			name: "multiple elements",
			input: []DatasetSchemaID{
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tt.expected, DatasetSchemaIDsToStrings(tt.input))
		})
	}
}

func TestDatasetSchemaIDsFrom(t *testing.T) {
	tests := []struct {
		name     string
		input    []string
		expected struct {
			res []DatasetSchemaID
			err error
		}
	}{
		{
			name:  "Empty slice",
			input: make([]string, 0),
			expected: struct {
				res []DatasetSchemaID
				err error
			}{
				res: make([]DatasetSchemaID, 0),
				err: nil,
			},
		},
		{
			name:  "1 element",
			input: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
			expected: struct {
				res []DatasetSchemaID
				err error
			}{
				res: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2")},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []DatasetSchemaID
				err error
			}{
				res: []DatasetSchemaID{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
				err: nil,
			},
		},
		{
			name: "error",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"x",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []DatasetSchemaID
				err error
			}{
				res: nil,
				err: ErrInvalidID,
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res, err := DatasetSchemaIDsFrom(tc.input)
			if tc.expected.err != nil {
				assert.Equal(t, tc.expected.err, err)
				assert.Nil(t, res)
			} else {
				assert.Nil(t, err)
				assert.Equal(t, tc.expected.res, res)
			}
		})
	}
}

func TestDatasetSchemaIDsFromID(t *testing.T) {
	tests := []struct {
		name     string
		input    []ID
		expected []DatasetSchemaID
	}{
		{
			name:     "Empty slice",
			input:    make([]ID, 0),
			expected: make([]DatasetSchemaID, 0),
		},
		{
			name:     "1 element",
			input:    []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []DatasetSchemaID{
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := DatasetSchemaIDsFromID(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestDatasetSchemaIDsFromIDRef(t *testing.T) {
	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")

	tests := []struct {
		name     string
		input    []*ID
		expected []DatasetSchemaID
	}{
		{
			name:     "Empty slice",
			input:    make([]*ID, 0),
			expected: make([]DatasetSchemaID, 0),
		},
		{
			name:     "1 element",
			input:    []*ID{&id1},
			expected: []DatasetSchemaID{MustDatasetSchemaID(id1.String())},
		},
		{
			name:  "multiple elements",
			input: []*ID{&id1, &id2, &id3},
			expected: []DatasetSchemaID{
				MustDatasetSchemaID(id1.String()),
				MustDatasetSchemaID(id2.String()),
				MustDatasetSchemaID(id3.String()),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := DatasetSchemaIDsFromIDRef(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestDatasetSchemaIDsToID(t *testing.T) {
	tests := []struct {
		name     string
		input    []DatasetSchemaID
		expected []ID
	}{
		{
			name:     "Empty slice",
			input:    make([]DatasetSchemaID, 0),
			expected: make([]ID, 0),
		},
		{
			name:     "1 element",
			input:    []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []DatasetSchemaID{
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := DatasetSchemaIDsToID(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestDatasetSchemaIDsToIDRef(t *testing.T) {
	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id21 := MustDatasetSchemaID(id1.String())
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id22 := MustDatasetSchemaID(id2.String())
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")
	id23 := MustDatasetSchemaID(id3.String())

	tests := []struct {
		name     string
		input    []*DatasetSchemaID
		expected []*ID
	}{
		{
			name:     "Empty slice",
			input:    make([]*DatasetSchemaID, 0),
			expected: make([]*ID, 0),
		},
		{
			name:     "1 element",
			input:    []*DatasetSchemaID{&id21},
			expected: []*ID{&id1},
		},
		{
			name:     "multiple elements",
			input:    []*DatasetSchemaID{&id21, &id22, &id23},
			expected: []*ID{&id1, &id2, &id3},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := DatasetSchemaIDsToIDRef(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestNewDatasetSchemaIDSet(t *testing.T) {
	DatasetSchemaIdSet := NewDatasetSchemaIDSet()
	assert.NotNil(t, DatasetSchemaIdSet)
	assert.Empty(t, DatasetSchemaIdSet.m)
	assert.Empty(t, DatasetSchemaIdSet.s)
}

func TestDatasetSchemaIDSet_Add(t *testing.T) {
	tests := []struct {
		name     string
		input    []DatasetSchemaID
		expected *DatasetSchemaIDSet
	}{
		{
			name:  "Empty slice",
			input: make([]DatasetSchemaID, 0),
			expected: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{},
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: []DatasetSchemaID{
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []DatasetSchemaID{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
		{
			name: "multiple elements with duplication",
			input: []DatasetSchemaID{
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []DatasetSchemaID{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			set := NewDatasetSchemaIDSet()
			set.Add(tc.input...)
			assert.Equal(t, tc.expected, set)
		})
	}
}

func TestDatasetSchemaIDSet_AddRef(t *testing.T) {
	tests := []struct {
		name     string
		input    *DatasetSchemaID
		expected *DatasetSchemaIDSet
	}{
		{
			name:  "Empty slice",
			input: nil,
			expected: &DatasetSchemaIDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1").Ref(),
			expected: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			set := NewDatasetSchemaIDSet()
			set.AddRef(tc.input)
			assert.Equal(t, tc.expected, set)
		})
	}
}

func TestDatasetSchemaIDSet_Has(t *testing.T) {
	tests := []struct {
		name     string
		target   *DatasetSchemaIDSet
		input    DatasetSchemaID
		expected bool
	}{
		{
			name:     "Empty Set",
			target:   &DatasetSchemaIDSet{},
			input:    MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
			expected: false,
		},
		{
			name: "Set Contains the element",
			target: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			input:    MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
			expected: true,
		},
		{
			name: "Set does not Contains the element",
			target: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			input:    MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
			expected: false,
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.target.Has(tc.input))
		})
	}
}

func TestDatasetSchemaIDSet_Clear(t *testing.T) {
	tests := []struct {
		name     string
		input    *DatasetSchemaIDSet
		expected *DatasetSchemaIDSet
	}{
		{
			name:     "Empty set",
			input:    &DatasetSchemaIDSet{},
			expected: &DatasetSchemaIDSet{},
		},
		{
			name:     "Nil set",
			input:    nil,
			expected: nil,
		},
		{
			name: "Contains the element",
			input: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &DatasetSchemaIDSet{
				m: nil,
				s: nil,
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			tc.input.Clear()
			assert.Equal(t, tc.expected, tc.input)
		})
	}
}

func TestDatasetSchemaIDSet_All(t *testing.T) {
	tests := []struct {
		name     string
		input    *DatasetSchemaIDSet
		expected []DatasetSchemaID
	}{
		{
			name: "Empty",
			input: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{},
				s: nil,
			},
			expected: make([]DatasetSchemaID, 0),
		},
		{
			name:     "Nil",
			input:    nil,
			expected: nil,
		},
		{
			name: "1 element",
			input: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
		},
		{
			name: "multiple elements",
			input: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []DatasetSchemaID{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: []DatasetSchemaID{
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.input.All())
		})
	}
}

func TestDatasetSchemaIDSet_Clone(t *testing.T) {
	tests := []struct {
		name     string
		input    *DatasetSchemaIDSet
		expected *DatasetSchemaIDSet
	}{
		{
			name:     "nil set",
			input:    nil,
			expected: NewDatasetSchemaIDSet(),
		},
		{
			name:     "Empty set",
			input:    NewDatasetSchemaIDSet(),
			expected: NewDatasetSchemaIDSet(),
		},
		{
			name: "1 element",
			input: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []DatasetSchemaID{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []DatasetSchemaID{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			clone := tc.input.Clone()
			assert.Equal(t, tc.expected, clone)
			assert.NotSame(t, tc.input, clone)
		})
	}
}

func TestDatasetSchemaIDSet_Merge(t *testing.T) {
	tests := []struct {
		name  string
		input struct {
			a *DatasetSchemaIDSet
			b *DatasetSchemaIDSet
		}
		expected *DatasetSchemaIDSet
	}{
		{
			name: "Nil Set",
			input: struct {
				a *DatasetSchemaIDSet
				b *DatasetSchemaIDSet
			}{
				a: &DatasetSchemaIDSet{
					m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: nil,
			},
			expected: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "Empty Set",
			input: struct {
				a *DatasetSchemaIDSet
				b *DatasetSchemaIDSet
			}{
				a: &DatasetSchemaIDSet{},
				b: &DatasetSchemaIDSet{},
			},
			expected: &DatasetSchemaIDSet{},
		},
		{
			name: "1 Empty Set",
			input: struct {
				a *DatasetSchemaIDSet
				b *DatasetSchemaIDSet
			}{
				a: &DatasetSchemaIDSet{
					m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &DatasetSchemaIDSet{},
			},
			expected: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "2 non Empty Set",
			input: struct {
				a *DatasetSchemaIDSet
				b *DatasetSchemaIDSet
			}{
				a: &DatasetSchemaIDSet{
					m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &DatasetSchemaIDSet{
					m: map[DatasetSchemaID]struct{}{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"): {}},
					s: []DatasetSchemaID{MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2")},
				},
			},
			expected: &DatasetSchemaIDSet{
				m: map[DatasetSchemaID]struct{}{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"): {},
				},
				s: []DatasetSchemaID{
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustDatasetSchemaID("01f3zhcaq35403zdjnd6dcm0t2"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.input.a.Merge(tc.input.b))
		})
	}
}
