// Code generated by gen, DO NOT EDIT.

package id

import (
	"encoding/json"
	"errors"
	"testing"

	"github.com/oklog/ulid"
	"github.com/stretchr/testify/assert"
)

func TestNewProjectID(t *testing.T) {
	id := NewProjectID()
	assert.NotNil(t, id)
	ulID, err := ulid.Parse(id.String())

	assert.NotNil(t, ulID)
	assert.Nil(t, err)
}

func TestProjectIDFrom(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    string
		expected struct {
			result ProjectID
			err    error
		}
	}{
		{
			name:  "Fail:Not valid string",
			input: "testMustFail",
			expected: struct {
				result ProjectID
				err    error
			}{
				ProjectID{},
				ErrInvalidID,
			},
		},
		{
			name:  "Fail:Not valid string",
			input: "",
			expected: struct {
				result ProjectID
				err    error
			}{
				ProjectID{},
				ErrInvalidID,
			},
		},
		{
			name:  "success:valid string",
			input: "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: struct {
				result ProjectID
				err    error
			}{
				ProjectID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
				nil,
			},
		},
	}
	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			result, err := ProjectIDFrom(tc.input)
			assert.Equal(tt, tc.expected.result, result)
			if err != nil {
				assert.True(tt, errors.As(tc.expected.err, &err))
			}
		})
	}
}

func TestMustProjectID(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name        string
		input       string
		shouldPanic bool
		expected    ProjectID
	}{
		{
			name:        "Fail:Not valid string",
			input:       "testMustFail",
			shouldPanic: true,
		},
		{
			name:        "Fail:Not valid string",
			input:       "",
			shouldPanic: true,
		},
		{
			name:        "success:valid string",
			input:       "01f2r7kg1fvvffp0gmexgy5hxy",
			shouldPanic: false,
			expected:    ProjectID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}
	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			if tc.shouldPanic {
				assert.Panics(tt, func() { MustBeID(tc.input) })
				return
			}
			result := MustProjectID(tc.input)
			assert.Equal(tt, tc.expected, result)
		})
	}
}

func TestProjectIDFromRef(t *testing.T) {
	testCases := []struct {
		name     string
		input    string
		expected *ProjectID
	}{
		{
			name:     "Fail:Not valid string",
			input:    "testMustFail",
			expected: nil,
		},
		{
			name:     "Fail:Not valid string",
			input:    "",
			expected: nil,
		},
		{
			name:     "success:valid string",
			input:    "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: &ProjectID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}
	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			result := ProjectIDFromRef(&tc.input)
			assert.Equal(tt, tc.expected, result)
			if tc.expected != nil {
				assert.Equal(tt, *tc.expected, *result)
			}
		})
	}
}

func TestProjectIDFromRefID(t *testing.T) {
	id := New()

	subId := ProjectIDFromRefID(&id)

	assert.NotNil(t, subId)
	assert.Equal(t, subId.id, id.id)
}

func TestProjectID_ID(t *testing.T) {
	id := New()
	subId := ProjectIDFromRefID(&id)

	idOrg := subId.ID()

	assert.Equal(t, id, idOrg)
}

func TestProjectID_String(t *testing.T) {
	id := New()
	subId := ProjectIDFromRefID(&id)

	assert.Equal(t, subId.String(), id.String())
}

func TestProjectID_GoString(t *testing.T) {
	id := New()
	subId := ProjectIDFromRefID(&id)

	assert.Equal(t, subId.GoString(), "id.ProjectID("+id.String()+")")
}

func TestProjectID_RefString(t *testing.T) {
	id := New()
	subId := ProjectIDFromRefID(&id)

	refString := subId.StringRef()

	assert.NotNil(t, refString)
	assert.Equal(t, *refString, id.String())
}

func TestProjectID_Ref(t *testing.T) {
	id := New()
	subId := ProjectIDFromRefID(&id)

	subIdRef := subId.Ref()

	assert.Equal(t, *subId, *subIdRef)
}

func TestProjectID_Contains(t *testing.T) {
	id := NewProjectID()
	id2 := NewProjectID()
	assert.True(t, id.Contains([]ProjectID{id, id2}))
	assert.False(t, id.Contains([]ProjectID{id2}))
}

func TestProjectID_CopyRef(t *testing.T) {
	id := New()
	subId := ProjectIDFromRefID(&id)

	subIdCopyRef := subId.CopyRef()

	assert.Equal(t, *subId, *subIdCopyRef)
	assert.NotSame(t, subId, subIdCopyRef)
}

func TestProjectID_IDRef(t *testing.T) {
	id := New()
	subId := ProjectIDFromRefID(&id)

	assert.Equal(t, id, *subId.IDRef())
}

func TestProjectID_StringRef(t *testing.T) {
	id := New()
	subId := ProjectIDFromRefID(&id)

	assert.Equal(t, *subId.StringRef(), id.String())
}

func TestProjectID_MarhsalJSON(t *testing.T) {
	id := New()
	subId := ProjectIDFromRefID(&id)

	res, err := subId.MarhsalJSON()
	exp, _ := json.Marshal(subId.String())

	assert.Nil(t, err)
	assert.Equal(t, exp, res)
}

func TestProjectID_UnmarhsalJSON(t *testing.T) {
	jsonString := "\"01f3zhkysvcxsnzepyyqtq21fb\""

	subId := &ProjectID{}

	err := subId.UnmarhsalJSON([]byte(jsonString))

	assert.Nil(t, err)
	assert.Equal(t, "01f3zhkysvcxsnzepyyqtq21fb", subId.String())
}

func TestProjectID_MarshalText(t *testing.T) {
	id := New()
	subId := ProjectIDFromRefID(&id)

	res, err := subId.MarshalText()

	assert.Nil(t, err)
	assert.Equal(t, []byte(id.String()), res)
}

func TestProjectID_UnmarshalText(t *testing.T) {
	text := []byte("01f3zhcaq35403zdjnd6dcm0t2")

	subId := &ProjectID{}

	err := subId.UnmarshalText(text)

	assert.Nil(t, err)
	assert.Equal(t, "01f3zhcaq35403zdjnd6dcm0t2", subId.String())

}

func TestProjectID_IsNil(t *testing.T) {
	subId := ProjectID{}

	assert.True(t, subId.IsNil())

	id := New()
	subId = *ProjectIDFromRefID(&id)

	assert.False(t, subId.IsNil())
}

func TestProjectIDToKeys(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    []ProjectID
		expected []string
	}{
		{
			name:     "Empty slice",
			input:    make([]ProjectID, 0),
			expected: make([]string, 0),
		},
		{
			name:     "1 element",
			input:    []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
		},
		{
			name: "multiple elements",
			input: []ProjectID{
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			assert.Equal(tt, tc.expected, ProjectIDToKeys(tc.input))
		})
	}

}

func TestProjectIDsFrom(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    []string
		expected struct {
			res []ProjectID
			err error
		}
	}{
		{
			name:  "Empty slice",
			input: make([]string, 0),
			expected: struct {
				res []ProjectID
				err error
			}{
				res: make([]ProjectID, 0),
				err: nil,
			},
		},
		{
			name:  "1 element",
			input: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
			expected: struct {
				res []ProjectID
				err error
			}{
				res: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t2")},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []ProjectID
				err error
			}{
				res: []ProjectID{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []ProjectID
				err error
			}{
				res: nil,
				err: ErrInvalidID,
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			if tc.expected.err != nil {
				_, err := ProjectIDsFrom(tc.input)
				assert.True(tt, errors.As(ErrInvalidID, &err))
			} else {
				res, err := ProjectIDsFrom(tc.input)
				assert.Equal(tt, tc.expected.res, res)
				assert.Nil(tt, err)
			}

		})
	}
}

func TestProjectIDsFromID(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name     string
		input    []ID
		expected []ProjectID
	}{
		{
			name:     "Empty slice",
			input:    make([]ID, 0),
			expected: make([]ProjectID, 0),
		},
		{
			name:     "1 element",
			input:    []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []ProjectID{
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := ProjectIDsFromID(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestProjectIDsFromIDRef(t *testing.T) {
	t.Parallel()

	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")

	testCases := []struct {
		name     string
		input    []*ID
		expected []ProjectID
	}{
		{
			name:     "Empty slice",
			input:    make([]*ID, 0),
			expected: make([]ProjectID, 0),
		},
		{
			name:     "1 element",
			input:    []*ID{&id1},
			expected: []ProjectID{MustProjectID(id1.String())},
		},
		{
			name:  "multiple elements",
			input: []*ID{&id1, &id2, &id3},
			expected: []ProjectID{
				MustProjectID(id1.String()),
				MustProjectID(id2.String()),
				MustProjectID(id3.String()),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := ProjectIDsFromIDRef(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestProjectIDsToID(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    []ProjectID
		expected []ID
	}{
		{
			name:     "Empty slice",
			input:    make([]ProjectID, 0),
			expected: make([]ID, 0),
		},
		{
			name:     "1 element",
			input:    []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []ProjectID{
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := ProjectIDsToID(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestProjectIDsToIDRef(t *testing.T) {
	t.Parallel()

	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	subId1 := MustProjectID(id1.String())
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	subId2 := MustProjectID(id2.String())
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")
	subId3 := MustProjectID(id3.String())

	testCases := []struct {
		name     string
		input    []*ProjectID
		expected []*ID
	}{
		{
			name:     "Empty slice",
			input:    make([]*ProjectID, 0),
			expected: make([]*ID, 0),
		},
		{
			name:     "1 element",
			input:    []*ProjectID{&subId1},
			expected: []*ID{&id1},
		},
		{
			name:     "multiple elements",
			input:    []*ProjectID{&subId1, &subId2, &subId3},
			expected: []*ID{&id1, &id2, &id3},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			res := ProjectIDsToIDRef(tc.input)
			assert.Equal(tt, tc.expected, res)
		})
	}
}

func TestNewProjectIDSet(t *testing.T) {
	ProjectIdSet := NewProjectIDSet()

	assert.NotNil(t, ProjectIdSet)
	assert.Empty(t, ProjectIdSet.m)
	assert.Empty(t, ProjectIdSet.s)
}

func TestProjectIDSet_Add(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    []ProjectID
		expected *ProjectIDSet
	}{
		{
			name:  "Empty slice",
			input: make([]ProjectID, 0),
			expected: &ProjectIDSet{
				m: map[ProjectID]struct{}{},
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: &ProjectIDSet{
				m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: []ProjectID{
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &ProjectIDSet{
				m: map[ProjectID]struct{}{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []ProjectID{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
		{
			name: "multiple elements with duplication",
			input: []ProjectID{
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &ProjectIDSet{
				m: map[ProjectID]struct{}{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []ProjectID{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			set := NewProjectIDSet()
			set.Add(tc.input...)
			assert.Equal(tt, tc.expected, set)
		})
	}
}

func TestProjectIDSet_AddRef(t *testing.T) {
	t.Parallel()

	ProjectId := MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")

	testCases := []struct {
		name     string
		input    *ProjectID
		expected *ProjectIDSet
	}{
		{
			name:  "Empty slice",
			input: nil,
			expected: &ProjectIDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: &ProjectId,
			expected: &ProjectIDSet{
				m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			set := NewProjectIDSet()
			set.AddRef(tc.input)
			assert.Equal(tt, tc.expected, set)
		})
	}
}

func TestProjectIDSet_Has(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name  string
		input struct {
			ProjectIDSet
			ProjectID
		}
		expected bool
	}{
		{
			name: "Empty Set",
			input: struct {
				ProjectIDSet
				ProjectID
			}{ProjectIDSet: ProjectIDSet{}, ProjectID: MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: false,
		},
		{
			name: "Set Contains the element",
			input: struct {
				ProjectIDSet
				ProjectID
			}{ProjectIDSet: ProjectIDSet{
				m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			}, ProjectID: MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: true,
		},
		{
			name: "Set does not Contains the element",
			input: struct {
				ProjectIDSet
				ProjectID
			}{ProjectIDSet: ProjectIDSet{
				m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			}, ProjectID: MustProjectID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: false,
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			assert.Equal(tt, tc.expected, tc.input.ProjectIDSet.Has(tc.input.ProjectID))
		})
	}
}

func TestProjectIDSet_Clear(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    ProjectIDSet
		expected ProjectIDSet
	}{
		{
			name:  "Empty Set",
			input: ProjectIDSet{},
			expected: ProjectIDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name: "Set Contains the element",
			input: ProjectIDSet{
				m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: ProjectIDSet{
				m: nil,
				s: nil,
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			set := tc.input
			p := &set
			p.Clear()
			assert.Equal(tt, tc.expected, *p)
		})
	}
}

func TestProjectIDSet_All(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    *ProjectIDSet
		expected []ProjectID
	}{
		{
			name: "Empty slice",
			input: &ProjectIDSet{
				m: map[ProjectID]struct{}{},
				s: nil,
			},
			expected: make([]ProjectID, 0),
		},
		{
			name: "1 element",
			input: &ProjectIDSet{
				m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
		},
		{
			name: "multiple elements",
			input: &ProjectIDSet{
				m: map[ProjectID]struct{}{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []ProjectID{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: []ProjectID{
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			assert.Equal(tt, tc.expected, tc.input.All())
		})
	}
}

func TestProjectIDSet_Clone(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name     string
		input    *ProjectIDSet
		expected *ProjectIDSet
	}{
		{
			name:     "nil set",
			input:    nil,
			expected: NewProjectIDSet(),
		},
		{
			name:     "Empty set",
			input:    NewProjectIDSet(),
			expected: NewProjectIDSet(),
		},
		{
			name: "1 element",
			input: &ProjectIDSet{
				m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &ProjectIDSet{
				m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: &ProjectIDSet{
				m: map[ProjectID]struct{}{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []ProjectID{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: &ProjectIDSet{
				m: map[ProjectID]struct{}{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []ProjectID{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()
			clone := tc.input.Clone()
			assert.Equal(tt, tc.expected, clone)
			assert.False(tt, tc.input == clone)
		})
	}
}

func TestProjectIDSet_Merge(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name  string
		input struct {
			a *ProjectIDSet
			b *ProjectIDSet
		}
		expected *ProjectIDSet
	}{
		{
			name: "Empty Set",
			input: struct {
				a *ProjectIDSet
				b *ProjectIDSet
			}{
				a: &ProjectIDSet{},
				b: &ProjectIDSet{},
			},
			expected: &ProjectIDSet{},
		},
		{
			name: "1 Empty Set",
			input: struct {
				a *ProjectIDSet
				b *ProjectIDSet
			}{
				a: &ProjectIDSet{
					m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &ProjectIDSet{},
			},
			expected: &ProjectIDSet{
				m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "2 non Empty Set",
			input: struct {
				a *ProjectIDSet
				b *ProjectIDSet
			}{
				a: &ProjectIDSet{
					m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &ProjectIDSet{
					m: map[ProjectID]struct{}{MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"): {}},
					s: []ProjectID{MustProjectID("01f3zhcaq35403zdjnd6dcm0t2")},
				},
			},
			expected: &ProjectIDSet{
				m: map[ProjectID]struct{}{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"): {},
				},
				s: []ProjectID{
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t1"),
					MustProjectID("01f3zhcaq35403zdjnd6dcm0t2"),
				},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(tt *testing.T) {
			tt.Parallel()

			assert.Equal(tt, tc.expected, tc.input.a.Merge(tc.input.b))
		})
	}
}
