// Code generated by gen, DO NOT EDIT.

package id

import "encoding/json"

// PropertyID is an ID for Property.
type PropertyID ID

// NewPropertyID generates a new PropertyId.
func NewPropertyID() PropertyID {
	return PropertyID(New())
}

// PropertyIDFrom generates a new PropertyID from a string.
func PropertyIDFrom(i string) (nid PropertyID, err error) {
	var did ID
	did, err = FromID(i)
	if err != nil {
		return
	}
	nid = PropertyID(did)
	return
}

// MustPropertyID generates a new PropertyID from a string, but panics if the string cannot be parsed.
func MustPropertyID(i string) PropertyID {
	did, err := FromID(i)
	if err != nil {
		panic(err)
	}
	return PropertyID(did)
}

// PropertyIDFromRef generates a new PropertyID from a string ref.
func PropertyIDFromRef(i *string) *PropertyID {
	did := FromIDRef(i)
	if did == nil {
		return nil
	}
	nid := PropertyID(*did)
	return &nid
}

// PropertyIDFromRefID generates a new PropertyID from a ref of a generic ID.
func PropertyIDFromRefID(i *ID) *PropertyID {
	if i == nil {
		return nil
	}
	nid := PropertyID(*i)
	return &nid
}

// ID returns a domain ID.
func (d PropertyID) ID() ID {
	return ID(d)
}

// String returns a string representation.
func (d PropertyID) String() string {
	return ID(d).String()
}

// GoString implements fmt.GoStringer interface.
func (d PropertyID) GoString() string {
	return "id.PropertyID(" + d.String() + ")"
}

// RefString returns a reference of string representation.
func (d PropertyID) RefString() *string {
	id := ID(d).String()
	return &id
}

// Ref returns a reference.
func (d PropertyID) Ref() *PropertyID {
	d2 := d
	return &d2
}

// Contains returns whether the id is contained in the slice.
func (d PropertyID) Contains(ids []PropertyID) bool {
	for _, i := range ids {
		if d.ID().Equal(i.ID()) {
			return true
		}
	}
	return false
}

// CopyRef returns a copy of a reference.
func (d *PropertyID) CopyRef() *PropertyID {
	if d == nil {
		return nil
	}
	d2 := *d
	return &d2
}

// IDRef returns a reference of a domain id.
func (d *PropertyID) IDRef() *ID {
	if d == nil {
		return nil
	}
	id := ID(*d)
	return &id
}

// StringRef returns a reference of a string representation.
func (d *PropertyID) StringRef() *string {
	if d == nil {
		return nil
	}
	id := ID(*d).String()
	return &id
}

// MarhsalJSON implements json.Marhsaler interface
func (d *PropertyID) MarhsalJSON() ([]byte, error) {
	return json.Marshal(d.String())
}

// UnmarhsalJSON implements json.Unmarshaler interface
func (d *PropertyID) UnmarhsalJSON(bs []byte) (err error) {
	var idstr string
	if err = json.Unmarshal(bs, &idstr); err != nil {
		return
	}
	*d, err = PropertyIDFrom(idstr)
	return
}

// MarshalText implements encoding.TextMarshaler interface
func (d *PropertyID) MarshalText() ([]byte, error) {
	if d == nil {
		return nil, nil
	}
	return []byte(d.String()), nil
}

// UnmarshalText implements encoding.TextUnmarshaler interface
func (d *PropertyID) UnmarshalText(text []byte) (err error) {
	*d, err = PropertyIDFrom(string(text))
	return
}

// Ref returns true if a ID is nil or zero-value
func (d PropertyID) IsNil() bool {
	return ID(d).IsNil()
}

// PropertyIDToKeys converts IDs into a string slice.
func PropertyIDToKeys(ids []PropertyID) []string {
	keys := make([]string, 0, len(ids))
	for _, i := range ids {
		keys = append(keys, i.String())
	}
	return keys
}

// PropertyIDsFrom converts a string slice into a ID slice.
func PropertyIDsFrom(ids []string) ([]PropertyID, error) {
	dids := make([]PropertyID, 0, len(ids))
	for _, i := range ids {
		did, err := PropertyIDFrom(i)
		if err != nil {
			return nil, err
		}
		dids = append(dids, did)
	}
	return dids, nil
}

// PropertyIDsFromID converts a generic ID slice into a ID slice.
func PropertyIDsFromID(ids []ID) []PropertyID {
	dids := make([]PropertyID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, PropertyID(i))
	}
	return dids
}

// PropertyIDsFromIDRef converts a ref of a generic ID slice into a ID slice.
func PropertyIDsFromIDRef(ids []*ID) []PropertyID {
	dids := make([]PropertyID, 0, len(ids))
	for _, i := range ids {
		if i != nil {
			dids = append(dids, PropertyID(*i))
		}
	}
	return dids
}

// PropertyIDsToID converts a ID slice into a generic ID slice.
func PropertyIDsToID(ids []PropertyID) []ID {
	dids := make([]ID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, i.ID())
	}
	return dids
}

// PropertyIDsToIDRef converts a ID ref slice into a generic ID ref slice.
func PropertyIDsToIDRef(ids []*PropertyID) []*ID {
	dids := make([]*ID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, i.IDRef())
	}
	return dids
}

// PropertyIDSet represents a set of PropertyIDs
type PropertyIDSet struct {
	m map[PropertyID]struct{}
	s []PropertyID
}

// NewPropertyIDSet creates a new PropertyIDSet
func NewPropertyIDSet() *PropertyIDSet {
	return &PropertyIDSet{}
}

// Add adds a new ID if it does not exists in the set
func (s *PropertyIDSet) Add(p ...PropertyID) {
	if s == nil || p == nil {
		return
	}
	if s.m == nil {
		s.m = map[PropertyID]struct{}{}
	}
	for _, i := range p {
		if _, ok := s.m[i]; !ok {
			if s.s == nil {
				s.s = []PropertyID{}
			}
			s.m[i] = struct{}{}
			s.s = append(s.s, i)
		}
	}
}

// AddRef adds a new ID ref if it does not exists in the set
func (s *PropertyIDSet) AddRef(p *PropertyID) {
	if s == nil || p == nil {
		return
	}
	s.Add(*p)
}

// Has checks if the ID exists in the set
func (s *PropertyIDSet) Has(p PropertyID) bool {
	if s == nil || s.m == nil {
		return false
	}
	_, ok := s.m[p]
	return ok
}

// Clear clears all stored IDs
func (s *PropertyIDSet) Clear() {
	if s == nil {
		return
	}
	s.m = nil
	s.s = nil
}

// All returns stored all IDs as a slice
func (s *PropertyIDSet) All() []PropertyID {
	if s == nil {
		return nil
	}
	return append([]PropertyID{}, s.s...)
}

// Clone returns a cloned set
func (s *PropertyIDSet) Clone() *PropertyIDSet {
	if s == nil {
		return NewPropertyIDSet()
	}
	s2 := NewPropertyIDSet()
	s2.Add(s.s...)
	return s2
}

// Merge returns a merged set
func (s *PropertyIDSet) Merge(s2 *PropertyIDSet) *PropertyIDSet {
	if s == nil {
		return nil
	}
	s3 := s.Clone()
	if s2 == nil {
		return s3
	}
	s3.Add(s2.s...)
	return s3
}
