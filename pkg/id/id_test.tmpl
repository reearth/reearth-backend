{{ $name := index .Flags.name 0 }}

package {{.PackageName}}

import (
	"encoding"
	"errors"
	"strings"
	"testing"

	"github.com/blang/semver"
	"github.com/stretchr/testify/assert"
)

func TestNew{{$name}}ID(t *testing.T) {
	id := New{{$name}}ID()
	assert.NotNil(t, id)
	u, err := ulid.Parse(id.String())
	assert.NotNil(t, u)
	assert.Nil(t, err)
}

func Test{{$name}}IDFrom(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected struct {
			result {{$name}}ID
			err    error
		}
	}{
		{
			name:  "Fail:Not valid string",
			input: "testMustFail",
			expected: struct {
				result {{$name}}ID
				err    error
			}{
				result: {{$name}}ID{},
				err:    ErrInvalidID,
			},
		},
		{
			name:  "Fail:Not valid string",
			input: "",
			expected: struct {
				result {{$name}}ID
				err    error
			}{
				result: {{$name}}ID{},
				err:    ErrInvalidID,
			},
		},
		{
			name:  "success:valid string",
			input: "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: struct {
				result {{$name}}ID
				err    error
			}{
				result: {{$name}}ID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
				err:    nil,
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result, err := {{$name}}IDFrom(tt.input)
			assert.Equal(t, tt.expected.result, result)
			if tt.expected.err != nil {
				assert.Equal(t, tt.expected.err, err)
			}
		})
	}
}

func TestMust{{$name}}ID(t *testing.T) {
	tests := []struct {
		name        string
		input       string
		shouldPanic bool
		expected    {{$name}}ID
	}{
		{
			name:        "Fail:Not valid string",
			input:       "testMustFail",
			shouldPanic: true,
		},
		{
			name:        "Fail:Not valid string",
			input:       "",
			shouldPanic: true,
		},
		{
			name:        "success:valid string",
			input:       "01f2r7kg1fvvffp0gmexgy5hxy",
			shouldPanic: false,
			expected:    {{$name}}ID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			if tt.shouldPanic {
				assert.Panics(t, func() { MustBeID(tt.input) })
				return
			}
			result := Must{{$name}}ID(tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func Test{{$name}}IDFromRef(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected *{{$name}}ID
	}{
		{
			name:     "Fail:Not valid string",
			input:    "testMustFail",
			expected: nil,
		},
		{
			name:     "Fail:Not valid string",
			input:    "",
			expected: nil,
		},
		{
			name:     "success:valid string",
			input:    "01f2r7kg1fvvffp0gmexgy5hxy",
			expected: &{{$name}}ID{ulid.MustParse("01f2r7kg1fvvffp0gmexgy5hxy")},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result := {{$name}}IDFromRef(&tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func Test{{$name}}IDFromRefID(t *testing.T) {
	id := New()
	id2 := {{$name}}IDFromRefID(&id)
	assert.Equal(t, id.id, id2.id)
	assert.Nil(t, {{$name}}IDFromRefID(nil))
	assert.Nil(t, {{$name}}IDFromRefID(&ID{}))
}

func Test{{$name}}ID_ID(t *testing.T) {
	id := New()
	id2 := {{$name}}IDFromRefID(&id)
	assert.Equal(t, id, id2.ID())
}

func Test{{$name}}ID_String(t *testing.T) {
	id := New()
	id2 := {{$name}}IDFromRefID(&id)
	assert.Equal(t, id.String(), id2.String())
	assert.Equal(t, "", {{$name}}ID{}.String())
}

func Test{{$name}}ID_RefString(t *testing.T) {
	id := New{{$name}}ID()
	assert.Equal(t, id.String(), *id.RefString())
	assert.Nil(t, {{$name}}ID{}.RefString())
}

func Test{{$name}}ID_GoString(t *testing.T) {
	id := New()
	id2 := {{$name}}IDFromRefID(&id)
	assert.Equal(t, "{{$name}}ID(" + id.String() + ")", id2.GoString())
	assert.Equal(t, "{{$name}}ID()", {{$name}}ID{}.GoString())
}

func Test{{$name}}ID_Ref(t *testing.T) {
	id := New{{$name}}ID()
	assert.Equal(t, {{$name}}ID(id), *id.Ref())
	assert.Nil(t, (&{{$name}}ID{}).Ref())
}

func Test{{$name}}ID_Contains(t *testing.T) {
	id := New{{$name}}ID()
	id2 := New{{$name}}ID()
	assert.True(t, id.Contains([]{{$name}}ID{id, id2}))
	assert.False(t, {{$name}}ID{}.Contains([]{{$name}}ID{id, id2, {}}))
	assert.False(t, id.Contains([]{{$name}}ID{id2}))
}

func Test{{$name}}ID_CopyRef(t *testing.T) {
	id := New{{$name}}ID().Ref()
	id2 := id.CopyRef()
	assert.Equal(t, id, id2)
	assert.NotSame(t, id, id2)
	assert.Nil(t, (*{{$name}}ID)(nil).CopyRef())
}

func Test{{$name}}ID_IDRef(t *testing.T) {
	id := New()
	id2 := {{$name}}IDFromRefID(&id)
	assert.Equal(t, &id, id2.IDRef())
	assert.Nil(t, (&{{$name}}ID{}).IDRef())
	assert.Nil(t, (*{{$name}}ID)(nil).IDRef())
}

func Test{{$name}}ID_StringRef(t *testing.T) {
	id := New{{$name}}ID()
	assert.Equal(t, id.String(), *id.StringRef())
	assert.Nil(t, (&{{$name}}ID{}).StringRef())
	assert.Nil(t, (*{{$name}}ID)(nil).StringRef())
}

func Test{{$name}}ID_MarhsalJSON(t *testing.T) {
	id := New{{$name}}ID()
	res, err := id.MarhsalJSON()
	assert.Nil(t, err)
	exp, _ := json.Marshal(id.String())
	assert.Equal(t, exp, res)

	res, err = (&{{$name}}ID{}).MarhsalJSON()
	assert.Nil(t, err)
	assert.Nil(t, res)

	res, err = (*{{$name}}ID)(nil).MarhsalJSON()
	assert.Nil(t, err)
	assert.Nil(t, res)
}

func Test{{$name}}ID_UnmarhsalJSON(t *testing.T) {
	jsonString := "\"01f3zhkysvcxsnzepyyqtq21fb\""
	id := Must{{$name}}ID("01f3zhkysvcxsnzepyyqtq21fb")
	id2 := &{{$name}}ID{}
	err := id2.UnmarhsalJSON([]byte(jsonString))
	assert.Nil(t, err)
	assert.Equal(t, id, *id2)
}

func Test{{$name}}ID_MarshalText(t *testing.T) {
	id := New()
	res, err := {{$name}}IDFromRefID(&id).MarshalText()
	assert.Nil(t, err)
	assert.Equal(t, []byte(id.String()), res)

	res, err = (&{{$name}}ID{}).MarshalText()
	assert.Nil(t, err)
	assert.Nil(t, res)

	res, err = (*{{$name}}ID)(nil).MarshalText()
	assert.Nil(t, err)
	assert.Nil(t, res)
}

func Test{{$name}}ID_UnmarshalText(t *testing.T) {
	text := []byte("01f3zhcaq35403zdjnd6dcm0t2")
	id2 := &{{$name}}ID{}
	err := id2.UnmarshalText(text)
	assert.Nil(t, err)
	assert.Equal(t, "01f3zhcaq35403zdjnd6dcm0t2", id2.String())
}

func Test{{$name}}ID_IsNil(t *testing.T) {
	assert.True(t, {{$name}}ID{}.IsNil())
	assert.False(t, New{{$name}}ID().IsNil())
}

func Test{{$name}}ID_IsNilRef(t *testing.T) {
	assert.True(t, {{$name}}ID{}.Ref().IsNilRef())
	assert.True(t, (*{{$name}}ID)(nil).IsNilRef())
	assert.False(t, New{{$name}}ID().Ref().IsNilRef())
}

func Test{{$name}}IDsToStrings(t *testing.T) {
	tests := []struct {
		name     string
		input    []{{$name}}ID
		expected []string
	}{
		{
			name:     "Empty slice",
			input:    make([]{{$name}}ID, 0),
			expected: make([]string, 0),
		},
		{
			name:     "1 element",
			input:    []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
		},
		{
			name: "multiple elements",
			input: []{{$name}}ID{
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tt.expected, {{$name}}IDsToStrings(tt.input))
		})
	}
}

func Test{{$name}}IDsFrom(t *testing.T) {
	tests := []struct {
		name     string
		input    []string
		expected struct {
			res []{{$name}}ID
			err error
		}
	}{
		{
			name: "Empty slice",
			input: make([]string, 0),
			expected: struct {
				res []{{$name}}ID
				err error
			}{
				res: make([]{{$name}}ID, 0),
				err: nil,
			},
		},
		{
			name: "1 element",
			input: []string{"01f3zhcaq35403zdjnd6dcm0t2"},
			expected: struct {
				res []{{$name}}ID
				err error
			}{
				res: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2")},
				err: nil,
			},
		},
		{
			name: "multiple elements",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"01f3zhcaq35403zdjnd6dcm0t2",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []{{$name}}ID
				err error
			}{
				res: []{{$name}}ID{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
				err: nil,
			},
		},
		{
			name: "error",
			input: []string{
				"01f3zhcaq35403zdjnd6dcm0t1",
				"x",
				"01f3zhcaq35403zdjnd6dcm0t3",
			},
			expected: struct {
				res []{{$name}}ID
				err error
			}{
				res: nil,
				err: ErrInvalidID,
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res, err := {{$name}}IDsFrom(tc.input)
			if tc.expected.err != nil {
				assert.Equal(t, tc.expected.err, err)
				assert.Nil(t, res)
			} else {
				assert.Nil(t, err)
				assert.Equal(t, tc.expected.res, res)
			}
		})
	}
}

func Test{{$name}}IDsFromID(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name     string
		input    []ID
		expected []{{$name}}ID
	}{
		{
			name:     "Empty slice",
			input:    make([]ID, 0),
			expected: make([]{{$name}}ID, 0),
		},
		{
			name:     "1 element",
			input:    []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []{{$name}}ID{
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := {{$name}}IDsFromID(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func Test{{$name}}IDsFromIDRef(t *testing.T) {
	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")

	tests := []struct {
		name     string
		input    []*ID
		expected []{{$name}}ID
	}{
		{
			name:     "Empty slice",
			input:    make([]*ID, 0),
			expected: make([]{{$name}}ID, 0),
		},
		{
			name:     "1 element",
			input:    []*ID{&id1},
			expected: []{{$name}}ID{Must{{$name}}ID(id1.String())},
		},
		{
			name:  "multiple elements",
			input: []*ID{&id1, &id2, &id3},
			expected: []{{$name}}ID{
				Must{{$name}}ID(id1.String()),
				Must{{$name}}ID(id2.String()),
				Must{{$name}}ID(id3.String()),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := {{$name}}IDsFromIDRef(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func Test{{$name}}IDsToID(t *testing.T) {
	tests := []struct {
		name     string
		input    []{{$name}}ID
		expected []ID
	}{
		{
			name:     "Empty slice",
			input:    make([]{{$name}}ID, 0),
			expected: make([]ID, 0),
		},
		{
			name:     "1 element",
			input:    []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2")},
			expected: []ID{MustBeID("01f3zhcaq35403zdjnd6dcm0t2")},
		},
		{
			name: "multiple elements",
			input: []{{$name}}ID{
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: []ID{
				MustBeID("01f3zhcaq35403zdjnd6dcm0t1"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t2"),
				MustBeID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := {{$name}}IDsToID(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func Test{{$name}}IDsToIDRef(t *testing.T) {
	id1 := MustBeID("01f3zhcaq35403zdjnd6dcm0t1")
	id21 := Must{{$name}}ID(id1.String())
	id2 := MustBeID("01f3zhcaq35403zdjnd6dcm0t2")
	id22 := Must{{$name}}ID(id2.String())
	id3 := MustBeID("01f3zhcaq35403zdjnd6dcm0t3")
	id23 := Must{{$name}}ID(id3.String())

	tests := []struct {
		name     string
		input    []*{{$name}}ID
		expected []*ID
	}{
		{
			name:     "Empty slice",
			input:    make([]*{{$name}}ID, 0),
			expected: make([]*ID, 0),
		},
		{
			name:     "1 element",
			input:    []*{{$name}}ID{&id21},
			expected: []*ID{&id1},
		},
		{
			name:     "multiple elements",
			input:    []*{{$name}}ID{&id21, &id22, &id23},
			expected: []*ID{&id1, &id2, &id3},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			res := {{$name}}IDsToIDRef(tc.input)
			assert.Equal(t, tc.expected, res)
		})
	}
}

func TestNew{{$name}}IDSet(t *testing.T) {
	set := New{{$name}}IDSet()
	assert.NotNil(t, set)
	assert.Empty(t, set.m)
	assert.Empty(t, set.s)
	a := New{{$name}}ID()
	b := New{{$name}}ID()
	set = New{{$name}}IDSet(a, a, b)
	assert.Equal(t, []{{$name}}ID{a, b}, set.s)
}

func Test{{$name}}IDSet_Add(t *testing.T) {
	tests := []struct {
		name     string
		input    []{{$name}}ID
		expected *{{$name}}IDSet
	}{
		{
			name:     "Empty slice",
			input:    make([]{{$name}}ID, 0),
			expected: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{},
				s: nil,
			},
		},
		{
			name:     "1 element",
			input:    []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			expected: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: []{{$name}}ID{
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []{{$name}}ID{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
		{
			name:  "multiple elements with duplication",
			input: []{{$name}}ID{
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
			expected: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []{{$name}}ID{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			set := New{{$name}}IDSet()
			set.Add(tc.input...)
			assert.Equal(t, tc.expected, set)
		})
	}
}

func Test{{$name}}IDSet_AddRef(t *testing.T) {
	tests := []struct {
		name     string
		input    *{{$name}}ID
		expected *{{$name}}IDSet
	}{
		{
			name:     "Empty slice",
			input:    nil,
			expected: &{{$name}}IDSet{
				m: nil,
				s: nil,
			},
		},
		{
			name:  "1 element",
			input: Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1").Ref(),
			expected: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			set := New{{$name}}IDSet()
			set.AddRef(tc.input)
			assert.Equal(t, tc.expected, set)
		})
	}
}

func Test{{$name}}IDSet_Has(t *testing.T) {
	tests := []struct {
		name  string
		target *{{$name}}IDSet
		input {{$name}}ID
		expected bool
	}{
		{
			name:     "Empty Set",
			target:   &{{$name}}IDSet{},
			input:    Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
			expected: false,
		},
		{
			name:   "Set Contains the element",
			target: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			input:    Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
			expected: true,
		},
		{
			name: "Set does not Contains the element",
			target: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			input: Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
			expected: false,
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.target.Has(tc.input))
		})
	}
}

func Test{{$name}}IDSet_Clear(t *testing.T) {
	tests := []struct {
		name     string
		input    *{{$name}}IDSet
		expected *{{$name}}IDSet
	}{
		{
			name:     "Empty set",
			input:    &{{$name}}IDSet{},
			expected: &{{$name}}IDSet{},
		},
		{
			name:     "Nil set",
			input:    nil,
			expected: nil,
		},
		{
			name: "Contains the element",
			input: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &{{$name}}IDSet{
				m: nil,
				s: nil,
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			tc.input.Clear()
			assert.Equal(t, tc.expected, tc.input)
		})
	}
}

func Test{{$name}}IDSet_All(t *testing.T) {
	tests := []struct {
		name     string
		input    *{{$name}}IDSet
		expected []{{$name}}ID
	}{
		{
			name: "Empty",
			input: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{},
				s: nil,
			},
			expected: make([]{{$name}}ID, 0),
		},
		{
			name:     "Nil",
			input:    nil,
			expected: nil,
		},
		{
			name: "1 element",
			input: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
		},
		{
			name: "multiple elements",
			input: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []{{$name}}ID{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: []{{$name}}ID{
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
				Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.input.All())
		})
	}
}

func Test{{$name}}IDSet_Clone(t *testing.T) {
	tests := []struct {
		name     string
		input    *{{$name}}IDSet
		expected *{{$name}}IDSet
	}{
		{
			name:     "nil set",
			input:    nil,
			expected: New{{$name}}IDSet(),
		},
		{
			name:     "Empty set",
			input:    New{{$name}}IDSet(),
			expected: New{{$name}}IDSet(),
		},
		{
			name: "1 element",
			input: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
			expected: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "multiple elements",
			input: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []{{$name}}ID{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
			expected: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"): {},
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"): {},
				},
				s: []{{$name}}ID{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t3"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			clone := tc.input.Clone()
			assert.Equal(t, tc.expected, clone)
			assert.NotSame(t, tc.input, clone)
		})
	}
}

func Test{{$name}}IDSet_Merge(t *testing.T) {
	tests := []struct {
		name  string
		input struct {
			a *{{$name}}IDSet
			b *{{$name}}IDSet
		}
		expected *{{$name}}IDSet
	}{
		{
			name: "Nil Set",
			input: struct {
				a *{{$name}}IDSet
				b *{{$name}}IDSet
			}{
				a: &{{$name}}IDSet{
					m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: nil,
			},
			expected: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "Empty Set",
			input: struct {
				a *{{$name}}IDSet
				b *{{$name}}IDSet
			}{
				a: &{{$name}}IDSet{},
				b: &{{$name}}IDSet{},
			},
			expected: &{{$name}}IDSet{},
		},
		{
			name: "1 Empty Set",
			input: struct {
				a *{{$name}}IDSet
				b *{{$name}}IDSet
			}{
				a: &{{$name}}IDSet{
					m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &{{$name}}IDSet{},
			},
			expected: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
				s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
			},
		},
		{
			name: "2 non Empty Set",
			input: struct {
				a *{{$name}}IDSet
				b *{{$name}}IDSet
			}{
				a: &{{$name}}IDSet{
					m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {}},
					s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1")},
				},
				b: &{{$name}}IDSet{
					m: map[{{$name}}ID]struct{}{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"): {}},
					s: []{{$name}}ID{Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2")},
				},
			},
			expected: &{{$name}}IDSet{
				m: map[{{$name}}ID]struct{}{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"): {},
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"): {},
				},
				s: []{{$name}}ID{
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t1"),
					Must{{$name}}ID("01f3zhcaq35403zdjnd6dcm0t2"),
				},
			},
		},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			assert.Equal(t, tc.expected, tc.input.a.Merge(tc.input.b))
		})
	}
}
