{{ $name := index .Flags.name 0 }}

package {{.PackageName}}

import "encoding/json"

// {{$name}}ID is an ID for {{$name}}.
type {{$name}}ID ID

// New{{$name}}ID generates a new {{$name}}Id.
func New{{$name}}ID() {{$name}}ID {
	return {{$name}}ID(New())
}

// {{$name}}IDFrom generates a new {{$name}}ID from a string.
func {{$name}}IDFrom(i string) (nid {{$name}}ID, err error) {
	var did ID
	did, err = FromID(i)
	if err != nil {
		return
	}
	nid = {{$name}}ID(did)
	return
}

// Must{{$name}}ID generates a new {{$name}}ID from a string, but panics if the string cannot be parsed.
func Must{{$name}}ID(i string) {{$name}}ID {
	did, err := FromID(i)
	if err != nil {
		panic(err)
	}
	return {{$name}}ID(did)
}

// {{$name}}IDFromRef generates a new {{$name}}ID from a string ref.
func {{$name}}IDFromRef(i *string) *{{$name}}ID {
	did := FromIDRef(i)
	if did == nil {
		return nil
	}
	nid := {{$name}}ID(*did)
	return &nid
}

// {{$name}}IDFromRefID generates a new {{$name}}ID from a ref of a generic ID.
func {{$name}}IDFromRefID(i *ID) *{{$name}}ID {
	if i == nil {
		return nil
	}
	nid := {{$name}}ID(*i)
	return &nid
}

// ID returns a domain ID.
func (d {{$name}}ID) ID() ID {
	return ID(d)
}

// String returns a string representation.
func (d {{$name}}ID) String() string {
	return ID(d).String()
}

// GoString implements fmt.GoStringer interface.
func (d {{$name}}ID) GoString() string {
  return "id.{{$name}}ID(" + d.String() + ")"
}

// RefString returns a reference of string representation.
func (d {{$name}}ID) RefString() *string {
	id := ID(d).String()
	return &id
}

// Ref returns a reference.
func (d {{$name}}ID) Ref() *{{$name}}ID {
	d2 := d
	return &d2
}

// Contains returns whether the id is contained in the slice.
func (d {{$name}}ID) Contains(ids []{{$name}}ID) bool {
	for _, i := range ids {
		if d.ID().Equal(i.ID()) {
			return true
		}
	}
	return false
}

// CopyRef returns a copy of a reference.
func (d *{{$name}}ID) CopyRef() *{{$name}}ID {
	if d == nil {
		return nil
	}
	d2 := *d
	return &d2
}

// IDRef returns a reference of a domain id.
func (d *{{$name}}ID) IDRef() *ID {
	if d == nil {
		return nil
	}
	id := ID(*d)
	return &id
}

// StringRef returns a reference of a string representation.
func (d *{{$name}}ID) StringRef() *string {
	if d == nil {
		return nil
	}
	id := ID(*d).String()
	return &id
}

// MarhsalJSON implements json.Marhsaler interface
func (d *{{$name}}ID) MarhsalJSON() ([]byte, error) {
	return json.Marshal(d.String())
}

// UnmarhsalJSON implements json.Unmarshaler interface
func (d *{{$name}}ID) UnmarhsalJSON(bs []byte) (err error) {
	var idstr string
	if err = json.Unmarshal(bs, &idstr); err != nil {
		return
	}
	*d, err = {{$name}}IDFrom(idstr)
	return
}

// MarshalText implements encoding.TextMarshaler interface
func (d *{{$name}}ID) MarshalText() ([]byte, error) {
	if d == nil {
		return nil, nil
	}
	return []byte(d.String()), nil
}

// UnmarshalText implements encoding.TextUnmarshaler interface
func (d *{{$name}}ID) UnmarshalText(text []byte) (err error) {
	*d, err = {{$name}}IDFrom(string(text))
	return
}

// Ref returns true if a ID is nil or zero-value
func (d {{$name}}ID) IsNil() bool {
	return ID(d).IsNil()
}

// {{$name}}IDToKeys converts IDs into a string slice.
func {{$name}}IDToKeys(ids []{{$name}}ID) []string {
	keys := make([]string, 0, len(ids))
	for _, i := range ids {
		keys = append(keys, i.String())
	}
	return keys
}

// {{$name}}IDsFrom converts a string slice into a ID slice.
func {{$name}}IDsFrom(ids []string) ([]{{$name}}ID, error) {
	dids := make([]{{$name}}ID, 0, len(ids))
	for _, i := range ids {
		did, err := {{$name}}IDFrom(i)
		if err != nil {
			return nil, err
		}
		dids = append(dids, did)
	}
	return dids, nil
}

// {{$name}}IDsFromID converts a generic ID slice into a ID slice.
func {{$name}}IDsFromID(ids []ID) []{{$name}}ID {
	dids := make([]{{$name}}ID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, {{$name}}ID(i))
	}
	return dids
}

// {{$name}}IDsFromIDRef converts a ref of a generic ID slice into a ID slice.
func {{$name}}IDsFromIDRef(ids []*ID) []{{$name}}ID {
	dids := make([]{{$name}}ID, 0, len(ids))
	for _, i := range ids {
		if i != nil {
			dids = append(dids, {{$name}}ID(*i))
		}
	}
	return dids
}

// {{$name}}IDsToID converts a ID slice into a generic ID slice.
func {{$name}}IDsToID(ids []{{$name}}ID) []ID {
	dids := make([]ID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, i.ID())
	}
	return dids
}

// {{$name}}IDsToIDRef converts a ID ref slice into a generic ID ref slice.
func {{$name}}IDsToIDRef(ids []*{{$name}}ID) []*ID {
	dids := make([]*ID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, i.IDRef())
	}
	return dids
}

// {{$name}}IDSet represents a set of {{$name}}IDs
type {{$name}}IDSet struct {
	m map[{{$name}}ID]struct{}
	s []{{$name}}ID
}

// New{{$name}}IDSet creates a new {{$name}}IDSet
func New{{$name}}IDSet() *{{$name}}IDSet {
	return &{{$name}}IDSet{}
}

// Add adds a new ID if it does not exists in the set
func (s *{{$name}}IDSet) Add(p ...{{$name}}ID) {
	if s == nil || p == nil {
		return
	}
	if s.m == nil {
		s.m = map[{{$name}}ID]struct{}{}
	}
	for _, i := range p {
		if _, ok := s.m[i]; !ok {
			if s.s == nil {
				s.s = []{{$name}}ID{}
			}
			s.m[i] = struct{}{}
			s.s = append(s.s, i)
		}
	}
}

// AddRef adds a new ID ref if it does not exists in the set
func (s *{{$name}}IDSet) AddRef(p *{{$name}}ID) {
	if s == nil || p == nil {
		return
	}
	s.Add(*p)
}

// Has checks if the ID exists in the set
func (s *{{$name}}IDSet) Has(p {{$name}}ID) bool {
	if s == nil || s.m == nil {
		return false
	}
	_, ok := s.m[p]
	return ok
}

// Clear clears all stored IDs
func (s *{{$name}}IDSet) Clear() {
	if s == nil {
		return
	}
	s.m = nil
	s.s = nil
}

// All returns stored all IDs as a slice
func (s *{{$name}}IDSet) All() []{{$name}}ID {
	if s == nil {
		return nil
	}
	return append([]{{$name}}ID{}, s.s...)
}

// Clone returns a cloned set
func (s *{{$name}}IDSet) Clone() *{{$name}}IDSet {
	if s == nil {
		return New{{$name}}IDSet()
	}
	s2 := New{{$name}}IDSet()
	s2.Add(s.s...)
	return s2
}

// Merge returns a merged set
func (s *{{$name}}IDSet) Merge(s2 *{{$name}}IDSet) *{{$name}}IDSet {
	if s == nil {
		return nil
	}
	s3 := s.Clone()
	if s2 == nil {
		return s3
	}
	s3.Add(s2.s...)
	return s3
}
